{"version":3,"file":"static/chunks/2387-e8cbb08f615f00e7.js","mappings":"yUA2IAA,CAAAA,EAAAC,CAAA,CAtHa,OAAC,CAAEC,MAAAA,CAAK,CAAEC,YAAAA,CAAW,CAAEC,WAAAA,CAAU,CAAEC,WAAAA,CAAU,CAAS,CAAAC,EACzD,CAACC,EAASC,EAAW,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACjC,CAACC,EAAcC,EAAgB,CAAGF,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,EAAE,EAC7C,CAACG,EAAMC,EAAQ,CAAGJ,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAE3BK,EAAkB,KACpBN,EAAW,IAEXO,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CACXC,KAAM,IAA6Dd,MAAAA,CAAzDA,EAAQ,OAAS,aAAa,6BAAgDC,MAAAA,CAArBD,EAAM,iBAA2Be,MAAA,CAAZd,GACxFe,OAAQ,KACZ,GAAGC,IAAI,CAAC,IACJX,EAAW,IAENY,EAASC,KAAK,EACfV,EAAgBS,EAExB,EACJ,EAuBA,MAJAE,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACNR,GACJ,EAAG,CAACZ,EAAOC,EAAaC,EAAW,EAG/B,GAAAmB,EAAAC,IAAA,EAAAD,EAAAE,QAAA,YACI,GAAAF,EAAAC,IAAA,EAACE,EAAAA,EAAIA,CAAAA,CAACC,UAAS,GAACC,eAAe,0BAC3B,GAAAL,EAAAM,GAAA,EAACH,EAAAA,EAAIA,CAAAA,CAACI,KAAI,GAACC,KAAM,EAAGC,GAAI,CAAEC,YAAa,MAAO,WAC1C,GAAAV,EAAAM,GAAA,EAACK,EAAAA,CAASA,CAAAA,CACNC,YAAY,oBACZC,UAAS,GACTC,UAAS,GACTC,QAAS,EACTC,MAAO3B,EACP4B,SAAU,GAAO3B,EAAQ4B,EAAEC,MAAM,CAACH,KAAK,EACvCP,GAAI,CACA,uBAAwB,CACpBW,QAAS,UACb,CACJ,MAIR,GAAApB,EAAAM,GAAA,EAACH,EAAAA,EAAIA,CAAAA,CAACI,KAAI,YACN,GAAAP,EAAAM,GAAA,EAACe,EAAAA,CAAMA,CAAAA,CACHC,SAAUjC,KAAAA,EACVkC,QA3CH,KACb/B,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CACXC,KAAO,6BACPE,OAAQ,OACR6B,KAAM,CACF7C,MAAAA,EACAC,YAAAA,EACAS,KAAAA,CACJ,CACJ,GAAGO,IAAI,CAAC,IACCC,EAASC,KAAK,GACfR,EAAQ,IACRC,IAER,EACJ,EA4BuCkC,QAAQ,YAAYC,MAAM,mBAC7C,GAAA1B,EAAAM,GAAA,EAACqB,EAAAA,CAASA,CAAAA,CAAAA,UAKtB,GAAA3B,EAAAM,GAAA,EAACsB,EAAAA,CAAQA,CAAAA,CACLnB,GAAI,CACA,CAAC,MAA0Cf,MAAA,CAApCmC,EAAAA,CAA8BA,CAACC,IAAI,EAAG,CAAE,CAC3CtB,KAAM,EACV,CACJ,WAECrB,EAAa4C,GAAG,CAAC,CAACC,EAAKC,IAEhB,GAAAjC,EAAAC,IAAA,EAACiC,EAAAA,CAAYA,CAAAA,WACT,GAAAlC,EAAAM,GAAA,EAAC6B,EAAAA,CAAuBA,CAAAA,CACpB1B,GAAI,CAAE2B,EAAG,QAAS,EAClBX,QAAQ,QACRC,MAAM,0BAELW,IAAOL,EAAIM,SAAS,EAAEC,MAAM,CAAC,gBAElC,GAAAvC,EAAAC,IAAA,EAACuC,EAAAA,CAAiBA,CAAAA,WACd,GAAAxC,EAAAM,GAAA,EAACmC,EAAAA,CAAiBA,CAAAA,CAAAA,GAClB,GAAAzC,EAAAM,GAAA,EAACoC,EAAAA,CAAWA,CAAAA,UAEJV,EAAIW,IAAI,EAAIX,EAAIW,IAAI,CAACC,SAAS,CAEtB,GAAA5C,EAAAM,GAAA,EAACuC,EAAAA,CAAOA,CAAAA,CAACC,MAAO,GAAyBd,MAAAA,CAAtBA,EAAIW,IAAI,CAACI,SAAS,CAAC,KAAqBrD,MAAA,CAAlBsC,EAAIW,IAAI,CAACK,QAAQ,WACtD,GAAAhD,EAAAM,GAAA,EAAC2C,EAAAA,CAAMA,CAAAA,CAACC,IAAKC,CAAAA,EAAAA,EAAAA,EAAAA,EAASnB,EAAIW,IAAI,CAACC,SAAS,EAAGnC,GAAI,CAAE2C,MAAO,OAAQC,OAAQ,MAAO,MAInF,GAAArD,EAAAM,GAAA,EAACgD,EAAAA,CAAYA,CAAAA,CAAAA,KAI7B,GAAAtD,EAAAM,GAAA,EAACmC,EAAAA,CAAiBA,CAAAA,CAAAA,MAEtB,GAAAzC,EAAAC,IAAA,EAACsD,EAAAA,CAAeA,CAAAA,WACZ,GAAAvD,EAAAM,GAAA,EAACkD,KAAAA,CAAAA,GACA1E,EAAWkD,QA3BDC,MAmC9BjD,EAAU,GAAAgB,EAAAM,GAAA,EAACmD,EAAAA,CAAcA,CAAAA,CAAAA,GAAM,OAG5C,+VC8RAhF,CAAAA,EAAAC,CAAA,CAlZkB,OAAC,CAAEC,MAAAA,CAAK,CAAEC,YAAAA,CAAW,CAAE8E,GAAAA,CAAE,CAAS,CAAA3E,EAC1C,CAAC4E,EAAKC,EAAO,CAAG1E,CAAAA,EAAAA,EAAAA,QAAAA,EAAqB,MACrC,CAACF,EAASC,EAAW,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACjC,CAAC2E,EAASC,EAAW,CAAG5E,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACjC,CAAC6E,EAAgBC,EAAkB,CAAG9E,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAC/C,CAAC+E,EAAaC,EAAe,CAAGhF,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACzC,CAACiF,EAAaC,EAAe,CAAGlF,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,EAAE,EAC3C,CAACmF,EAASC,EAAW,CAAGpF,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACjC,CAACqF,EAAMC,EAAQ,CAAGtF,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAE3B,CAACuF,EAAkBC,EAAoB,CAAGxF,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACnD,CAACyF,EAAeC,EAAiB,CAAG1F,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAC7C,CAAC2F,EAAcC,GAAgB,CAAG5F,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAC3C,CAAC6F,GAAWC,GAAa,CAAG9F,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,EAAE,EACvC,CAAC+F,GAAeC,GAAiB,CAAGhG,CAAAA,EAAAA,EAAAA,QAAAA,EAASiG,KAAKC,MAAM,IAE1DC,GAAQC,CAAAA,EAAAA,EAAAA,MAAAA,EAAO,MAEbC,GAAS,KACXtG,EAAW,IAEXO,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CACXC,KAAM,oBAA0BC,MAAA,CAANf,GAC1BgB,OAAQ,KACZ,GAAGC,IAAI,CAAC,IACJX,EAAW,IAENY,EAASC,KAAK,GACf8D,EAAO/D,GACPmE,EAAkBnE,EAAS2F,GAAG,EAEtC,EACJ,EAEMC,GAAe,KACjBjG,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CACXC,KAAO,wBACPE,OAAQ,KACZ,GAAGC,IAAI,CAAC,IACCC,EAASC,KAAK,EACfkF,GAAanF,EAAS6F,IAAI,CAElC,GAAGC,KAAK,CAAC,IACLC,CAAAA,EAAAA,EAAAA,CAAAA,EAAO9F,EAAM+F,OAAO,EACpBb,GAAa,EAAE,CACnB,EACJ,EAEAjF,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACFpB,GACA4G,IAER,EAAG,CAAC5G,EAAM,EAEVoB,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACNmE,EAAeR,GAAM,GACzB,EAAG,CAACA,EAAG,EAEP,IAAMoC,GAAiB,KACnB,GAAI,CAACjB,EAAc,CACfe,CAAAA,EAAAA,EAAAA,CAAAA,EAAO,mCACP,MACJ,CAEApG,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CACXC,KAAO,0BACPE,OAAQ,OACR6B,KAAM,CACFuE,KAAMlB,EACNd,eAAAA,EACAE,YAAAA,EACAI,QAAAA,EACAE,KAAAA,EACAJ,YAAAA,CACJ,CACJ,GAAGvE,IAAI,CAAC,IACCC,EAASC,KAAK,GACf8F,CAAAA,EAAAA,EAAAA,CAAAA,EAAO,WACPlB,EAAoB,IAE5B,GAAGiB,KAAK,CAAC,IACLC,CAAAA,EAAAA,EAAAA,CAAAA,EAAO9F,EAAM+F,OAAO,CACxB,EACJ,EAEMG,GAAiB,IACnBxG,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CACXC,KAAO,0BACPE,OAAQ,OACR6B,KAAM,CACFyE,OAAQ,SACRT,IAAKU,CACT,CACJ,GAAGtG,IAAI,CAAC,IACCC,EAASC,KAAK,EACf2F,IAER,EACJ,EAEMU,GAAO,KACT,GAAI,CAAClC,GAAe,CAACI,GAAW,CAACE,EAAM,CACnCqB,CAAAA,EAAAA,EAAAA,CAAAA,EAAO,mCACP,MACJ,CAEA9B,EAAW,IAEXtE,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CACXC,KAAO,eACPE,OAAQ,OACR6B,KAAM,CACF5C,YAAAA,EACAmF,eAAAA,EACAE,YAAAA,EACAI,QAAAA,EACAE,KAAAA,EACAJ,YAAAA,CACJ,CACJ,GAAGvE,IAAI,CAAC,IACJkE,EAAW,IAENjE,EAASC,KAAK,EACf8F,CAAAA,EAAAA,EAAAA,CAAAA,EAAO,UAEf,GAAGD,KAAK,CAAC,IACL7B,EAAW,IACX8B,CAAAA,EAAAA,EAAAA,CAAAA,EAAO9F,EAAM+F,OAAO,CACxB,EACJ,EAMMO,GAAkB,IACpBhC,EAAeD,EAAYkC,MAAM,CAAC,GAAOC,EAAEC,GAAG,GAAKC,EAAWD,GAAG,EACrE,EAEME,GAAiB,IACnBrC,EAAe,IAAID,KAAgBuC,EAAQ,CAC/C,EAEMC,GAAc,IAChBzB,GAAiBC,KAAKC,MAAM,IAC5BpB,EAAkB4C,EAAS7C,cAAc,EACzCG,EAAe0C,EAAS3C,WAAW,EACnCK,EAAWsC,EAASvC,OAAO,EAC3BG,EAAQoC,EAASrC,IAAI,EACrBH,EAAewC,EAASzC,WAAW,EAEnCS,EAAiB,GACrB,SAwHA,EACW,GAAA5E,EAAAM,GAAA,EAACmD,EAAAA,CAAcA,CAAAA,CAAAA,GAItB,GAAAzD,EAAAC,IAAA,EAAAD,EAAAE,QAAA,YA1HA,EAKI,GAAAF,EAAAC,IAAA,EAAC4G,EAAAA,CAAMA,CAAAA,CAACC,KAAMrC,EAAkBsC,QAAS,IAAMrC,EAAoB,IAAQsC,WAAU,GAACvG,GAAI,CAAE2C,MAAO,MAAO6D,KAAM,SAAU,YACtH,GAAAjH,EAAAM,GAAA,EAAC4G,EAAAA,CAAWA,CAAAA,UAAC,qBACb,GAAAlH,EAAAC,IAAA,EAACkH,EAAAA,CAAaA,CAAAA,WACV,GAAAnH,EAAAM,GAAA,EAACkD,KAAAA,CAAAA,GAEA4D,CAAAA,EAAAA,EAAAA,EAAAA,EAAY,CAAEC,MAAO,gBAAiBC,SAAU,GAAMC,cAAe,IAClE,GAAAvH,EAAAM,GAAA,EAACK,EAAAA,CAASA,CAAAA,CAACK,MAAO6D,EAAc5D,SAAU,GAAO6D,GAAgB5D,EAAEC,MAAM,CAACH,KAAK,EAAGH,UAAS,IAC/F,GAEA,GAAAb,EAAAM,GAAA,EAACe,EAAAA,CAAMA,CAAAA,CACHE,QAAS,KACLmD,EAAoB,GACxB,EACAhD,MAAM,UACND,QAAQ,qBAAY,WAIvB,IAED,GAAAzB,EAAAM,GAAA,EAACe,EAAAA,CAAMA,CAAAA,CACHE,QAAS,KACLuE,IACJ,EACApE,MAAM,UACND,QAAQ,qBAAY,eA7BzB,KAsCX,EAKI,GAAAzB,EAAAC,IAAA,EAAC4G,EAAAA,CAAMA,CAAAA,CAACC,KAAMnC,EAAeoC,QAAS,IAAMnC,EAAiB,IAAQoC,WAAU,GAACvG,GAAI,CAAE2C,MAAO,MAAO6D,KAAM,SAAU,YAChH,GAAAjH,EAAAM,GAAA,EAAC4G,EAAAA,CAAWA,CAAAA,UACR,GAAAlH,EAAAC,IAAA,EAACE,EAAAA,EAAIA,CAAAA,CAACC,UAAS,GAACC,eAAe,gBAAgBmH,WAAW,mBACtD,GAAAxH,EAAAM,GAAA,EAACH,EAAAA,EAAIA,CAAAA,CAACI,KAAI,YAAC,kBAIX,GAAAP,EAAAM,GAAA,EAACH,EAAAA,EAAIA,CAAAA,CAACI,KAAI,YACN,GAAAP,EAAAM,GAAA,EAACmH,EAAAA,CAAUA,CAAAA,CAAClG,QAAS,IAAMqD,EAAiB,aACxC,GAAA5E,EAAAM,GAAA,EAACoH,EAAAA,CAASA,CAAAA,CAAAA,YAM1B,GAAA1H,EAAAC,IAAA,EAACkH,EAAAA,CAAaA,CAAAA,WACV,GAAAnH,EAAAM,GAAA,EAACqH,EAAAA,CAAcA,CAAAA,UACX,GAAA3H,EAAAC,IAAA,EAAC2H,EAAAA,CAAKA,CAAAA,WACF,GAAA5H,EAAAM,GAAA,EAACuH,EAAAA,CAASA,CAAAA,UACN,GAAA7H,EAAAC,IAAA,EAAC6H,EAAAA,CAAQA,CAAAA,WACL,GAAA9H,EAAAM,GAAA,EAACyH,EAAAA,CAASA,CAAAA,UAAC,SACX,GAAA/H,EAAAM,GAAA,EAACyH,EAAAA,CAASA,CAAAA,UAAC,eACX,GAAA/H,EAAAM,GAAA,EAACyH,EAAAA,CAASA,CAAAA,UAAC,gBACX,GAAA/H,EAAAM,GAAA,EAACyH,EAAAA,CAASA,CAAAA,CAAAA,QAIlB,GAAA/H,EAAAM,GAAA,EAAC0H,EAAAA,CAASA,CAAAA,UACLjD,GAAUhD,GAAG,CAAC,GACX,GAAA/B,EAAAC,IAAA,EAAC6H,EAAAA,CAAQA,CAAAA,WACL,GAAA9H,EAAAM,GAAA,EAACyH,EAAAA,CAASA,CAAAA,UACN,GAAA/H,EAAAM,GAAA,EAACgG,IAAAA,CAAE2B,KAAK,IAAI1G,QAAS,IAAMoF,GAAYC,YAClCA,EAASb,IAAI,KAGtB,GAAA/F,EAAAM,GAAA,EAACyH,EAAAA,CAASA,CAAAA,UAAE1F,IAAOuE,EAAStE,SAAS,EAAEC,MAAM,CAAC,sBAC9C,GAAAvC,EAAAM,GAAA,EAACyH,EAAAA,CAASA,CAAAA,UAAEnB,EAASsB,SAAS,CAAG7F,IAAOuE,EAASsB,SAAS,EAAE3F,MAAM,CAAC,oBAAsBF,IAAOuE,EAAStE,SAAS,EAAEC,MAAM,CAAC,sBAC3H,GAAAvC,EAAAM,GAAA,EAACyH,EAAAA,CAASA,CAAAA,UACN,GAAA/H,EAAAM,GAAA,EAACe,EAAAA,CAAMA,CAAAA,CACH8G,KAAK,QACLzG,MAAM,QACND,QAAQ,YACRF,QAAS,KACL6G,CAAAA,EAAAA,EAAAA,CAAAA,EAAQ,CACJtF,MAAO,iDACP+C,QAAS,gCACTwC,SAAU,IACFC,GACAtC,GAAeY,EAASpB,GAAG,CAEnC,CACJ,EACJ,WACH,wBAWrBT,IAAAA,GAAUwD,MAAM,CACZ,GAAAvI,EAAAM,GAAA,EAACkI,EAAAA,CAAGA,CAAAA,CAAC/H,GAAI,CAAEgI,UAAW,SAAUC,UAAW,MAAO,WAAG,uBACnD,WAtEX,KAsFP,GAAA1I,EAAAC,IAAA,EAACE,EAAAA,EAAIA,CAAAA,CAACC,UAAS,GAACC,eAAe,gBAAgBmH,WAAW,mBACtD,GAAAxH,EAAAM,GAAA,EAACH,EAAAA,EAAIA,CAAAA,CAACI,KAAI,KAEV,GAAAP,EAAAC,IAAA,EAACE,EAAAA,EAAIA,CAAAA,CAACI,KAAI,aACN,GAAAP,EAAAM,GAAA,EAACe,EAAAA,CAAMA,CAAAA,CACH8G,KAAK,QACL5G,QAAS,KACLqD,EAAiB,IACjBa,IACJ,EACAhE,QAAQ,qBAAY,kBAIvB,KAED,GAAAzB,EAAAM,GAAA,EAACe,EAAAA,CAAMA,CAAAA,CACH8G,KAAK,QACL5G,QAAS,KACLmD,EAAoB,IACpBI,GAAgB,GACpB,EACArD,QAAQ,qBAAY,qBAIvB,KAED,GAAAzB,EAAAM,GAAA,EAACe,EAAAA,CAAMA,CAAAA,CACH8G,KAAK,QACLzG,MAAM,UACNH,QAAS,KACL4E,IACJ,EACA7E,SAAUuC,EACVpC,QAAQ,qBACPoC,EAAU,aAAe,eAKtC,GAAA7D,EAAAM,GAAA,EAACkD,KAAAA,CAAAA,GACD,GAAAxD,EAAAC,IAAA,EAAC0I,EAAAA,EAAeA,CAAAA,CAACC,UAhMP,IACdC,CAAAA,EAAAA,EAAAA,EAAAA,EAAeC,EAAQzD,GAC3B,YA+La+B,CAAAA,EAAAA,EAAAA,EAAAA,EAAY,CAAEC,MAAO,YAAaE,cAAe,IAC9C,GAAAvH,EAAAM,GAAA,EAACyI,EAAAA,CAASA,CAAAA,CAENC,aAAcrF,EACdsF,SAAU,IACNjF,EAAkBL,EAAMA,EAAI6B,GAAG,CAAG,GACtC,GAJKP,GAMb,GAECmC,CAAAA,EAAAA,EAAAA,EAAAA,EAAY,CAAEC,MAAO,WAAYC,SAAU,GAAMC,cAAe,IAC7D,GAAAvH,EAAAM,GAAA,EAACK,EAAAA,CAASA,CAAAA,CAACK,MAAOiD,EAAahD,SAAU,GAAOiD,EAAehD,EAAEC,MAAM,CAACH,KAAK,EAAGH,UAAS,IAC7F,GAECuG,CAAAA,EAAAA,EAAAA,EAAAA,EAAY,CAAEC,MAAO,UAAWC,SAAU,GAAMC,cAAe,IAC5D,GAAAvH,EAAAM,GAAA,EAACK,EAAAA,CAASA,CAAAA,CAACK,MAAOqD,EAASpD,SAAU,GAAOqD,EAAWpD,EAAEC,MAAM,CAACH,KAAK,EAAGH,UAAS,IACrF,GAECuG,CAAAA,EAAAA,EAAAA,EAAAA,EAAY,CAAEC,MAAO,OAAQC,SAAU,GAAMC,cAAe,IAErD,GAAAvH,EAAAC,IAAA,EAAAD,EAAAE,QAAA,YACKgJ,CAAAA,EAAAA,EAAAA,EAAAA,EAAgB,UAAW,IAEpB,GAAAlJ,EAAAC,IAAA,EAACkJ,MAAAA,CAAIC,MAAO,CAAEhG,MAAO,MAAOiG,MAAO,QAASX,UAAW,QAASY,SAAU,MAAO,YAC7E,GAAAtJ,EAAAM,GAAA,EAACiJ,KAAAA,UAAG,SAEJ,GAAAvJ,EAAAM,GAAA,EAAC6I,MAAAA,CAAIC,MAAO,CAAE/F,OAAQ,QAASmG,SAAU,QAAS,WAC9C,GAAAxJ,EAAAM,GAAA,EAACmJ,EAAAA,EAAIA,CAAAA,CAAAA,SAMrB,GAAAzJ,EAAAC,IAAA,EAACkJ,MAAAA,CAAIC,MAAO,CAAEhG,MAAO,MAAOiG,MAAO,MAAO,YACrCH,CAAAA,EAAAA,EAAAA,EAAAA,EAAgB,mBAAoB,GAE7B,GAAAlJ,EAAAM,GAAA,EAACoJ,EAAAA,CAAMA,CAAAA,CACHN,MAAO,CAAE/F,OAAQ,QAAS,GAAGsG,CAAAA,EAAAA,EAAAA,EAAAA,EAAUC,EAAS,EAChD5I,MAAOuD,EACPtD,SAAU,GAAWuD,EAAQxD,GAC7B6I,mBAAoB,IAChBxE,GAAQyE,EACD,SAMvB,GAAA9J,EAAAM,GAAA,EAACkD,KAAAA,CAAAA,GAAK,GAAAxD,EAAAM,GAAA,EAACkD,KAAAA,CAAAA,GAAK,GAAAxD,EAAAM,GAAA,EAACkD,KAAAA,CAAAA,GAAK,GAAAxD,EAAAM,GAAA,EAACkD,KAAAA,CAAAA,GAEnB,GAAAxD,EAAAM,GAAA,EAACyJ,EAAAA,CAAKA,CAAAA,CACFjH,MAAM,GACNkH,MAAO7F,EACP8F,SAAU,IACN7D,GAAgBI,EACpB,EACA0D,UACI,GAAAlK,EAAAM,GAAA,EAAAN,EAAAE,QAAA,WACI,GAAAF,EAAAM,GAAA,EAAC6J,EAAAA,CAAQA,CAAAA,CACL9C,MAAM,gBACN+C,SAAU,GACVnJ,SAAU,IACNwF,GAAeC,EACnB,aAS/B,QAIjB,0MCtOAjI,CAAAA,EAAAC,CAAA,CAzK+B,OAAC,CAAEE,YAAAA,CAAW,CAAED,MAAAA,CAAK,CAAE0L,UAAAA,CAAS,CAAEC,OAAAA,CAAM,CAAS,CAAAvL,EACtE,CAACC,EAASC,EAAW,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACjC,CAAC4H,EAAMyD,EAAQ,CAAGrL,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAC3B,CAACsL,EAAUC,EAAY,CAAGvL,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACnC,CAACG,EAAMC,EAAQ,CAAGJ,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAC3B,CAACwG,EAAMgF,EAAQ,CAAGxL,CAAAA,EAAAA,EAAAA,QAAAA,EAAmB,EAAE,EAEvCyL,EAAY,UACdnL,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CACXC,KAAO,uBACPE,OAAQ,KACZ,GAAGC,IAAI,CAAC,IACJX,EAAW,IAENY,EAASC,KAAK,EACf4K,EAAQ7K,EAAS6F,IAAI,CAE7B,GAAGC,KAAK,CAACzE,IACL0E,CAAAA,EAAAA,EAAAA,CAAAA,EAAO1E,EAAE2E,OAAO,CACpB,EACJ,EAEM+E,EAAS,UACX3L,EAAW,IAEX,GAAI,CACA,MAAMO,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CACjBC,KAAM,sCACNE,OAAQ,OACR6B,KAAM,CACF5C,YAAAA,EACAD,MAAAA,EACA6L,SAAAA,EACAnL,KAAAA,CACJ,CACJ,GAEAkL,EAAQ,IAERF,IAEApL,EAAW,GACf,CAAE,MAAOa,EAAO,CACZb,EAAW,IACX2G,CAAAA,EAAAA,EAAAA,CAAAA,EAAO9F,EACX,CAEJ,EAEAC,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACNd,EAAW,IAEX0L,GACJ,EAAG,EAAE,EAEL,IAAM5D,EAAU,KACZwD,EAAQ,GACZ,EA8FM9J,EAAK,CAAEoK,OAAQ,SAAU,EACzBtJ,EAAU,IAAMgJ,EAAQ,IAE9B,MACI,GAAAvK,EAAAC,IAAA,EAAAD,EAAAE,QAAA,YA/FA,EAKI,GAAAF,EAAAC,IAAA,EAAC4G,EAAAA,CAAMA,CAAAA,CAACE,QAASA,EAAS+D,kBAAgB,cAAchE,KAAI,GAACE,WAAU,GAACoC,MAAO,CAAEhG,MAAO,MAAO6D,KAAM,SAAU,YAC3G,GAAAjH,EAAAM,GAAA,EAAC4G,EAAAA,CAAWA,CAAAA,CAAC6D,GAAG,uBACZ,GAAA/K,EAAAC,IAAA,EAACuI,EAAAA,CAAGA,CAAAA,CAACwC,QAAQ,OAAOxD,WAAW,mBAC3B,GAAAxH,EAAAM,GAAA,EAACkI,EAAAA,CAAGA,CAAAA,CAACyC,SAAU,WAAG,kBAClB,GAAAjL,EAAAC,IAAA,EAACuI,EAAAA,CAAGA,CAAAA,WACA,GAAAxI,EAAAM,GAAA,EAACmH,EAAAA,CAAUA,CAAAA,CAAClG,QAASwF,WACjB,GAAA/G,EAAAM,GAAA,EAACoH,EAAAA,CAASA,CAAAA,CAAAA,KAGd,GAAA1H,EAAAM,GAAA,EAACe,EAAAA,CAAMA,CAAAA,CAACI,QAAQ,YAAYC,MAAM,UAAUH,QAASqJ,EAAQtJ,SAAUtC,WAClEA,EAAU,YAAc,iBAMzC,GAAAgB,EAAAC,IAAA,EAACkH,EAAAA,CAAaA,CAAAA,CAACiC,MAAO,CAAE8B,gBAAiB,SAAU,YAC/C,GAAAlL,EAAAM,GAAA,EAACkD,KAAAA,CAAAA,GAAK,GAAAxD,EAAAM,GAAA,EAACkD,KAAAA,CAAAA,GAEN4D,CAAAA,EAAAA,EAAAA,EAAAA,EAAY,CAAEC,MAAO,QAASE,cAAe,IACnC,GAAAvH,EAAAM,GAAA,EAACK,EAAAA,CAASA,CAAAA,CAACG,UAAS,GAACC,QAAS,EAAGF,UAAS,GAACG,MAAO3B,EAAM4B,SAAU,GAAO3B,EAAQ4B,EAAEC,MAAM,CAACH,KAAK,GACzG,GAEAoG,CAAAA,EAAAA,EAAAA,EAAAA,EAAY,CAAEC,MAAO,SAAUE,cAAe,KAC3C,GAAIiD,EAAU,CACV,IAAMW,EAASzF,EAAK0F,IAAI,CAAC,GAAU7K,EAAKiF,GAAG,GAAKgF,GAEhD,MACI,GAAAxK,EAAAC,IAAA,EAACkJ,MAAAA,CAAIC,MAAO,CAAE4B,QAAS,OAAQxD,WAAY,QAAS,YAChD,GAAAxH,EAAAC,IAAA,EAACkJ,MAAAA,CAAIkC,UAAU,qCACX,GAAArL,EAAAM,GAAA,EAAC6I,MAAAA,CAAIkC,UAAU,SAASjC,MAAO,CAAE8B,gBAAiBC,EAAOzJ,KAAK,IAC7DyJ,EAAOpF,IAAI,IAGhB,GAAA/F,EAAAM,GAAA,EAAC6I,MAAAA,CACGC,MAAO,CACHkC,WAAY,OACZT,OAAQ,UACRK,gBAAiB,UACjB9J,QAAS,UACTmK,cAAe,MACfC,aAAc,MAClB,EACAjK,QAAS,KACLkJ,EAAY,KAChB,WAEA,GAAAzK,EAAAM,GAAA,EAACmL,EAAAA,CAAQA,CAAAA,CAAAA,OAIzB,CAEA,MACI,GAAAzL,EAAAC,IAAA,EAAAD,EAAAE,QAAA,YACKwF,EAAK3D,GAAG,CAAC,GAEF,GAAA/B,EAAAC,IAAA,EAAAD,EAAAE,QAAA,YACI,GAAAF,EAAAC,IAAA,EAACkJ,MAAAA,CAEGkC,UAAU,2BACV9J,QAAS,IAAMkJ,EAAYH,EAAO9E,GAAG,YAGrC,GAAAxF,EAAAM,GAAA,EAAC6I,MAAAA,CAAIkC,UAAU,SAASjC,MAAO,CAAE8B,gBAAiBZ,EAAO5I,KAAK,IAC9D,GAAA1B,EAAAM,GAAA,EAACoL,OAAAA,UAAMpB,EAAOvE,IAAI,KANbuE,EAAO9E,GAAG,EASnB,GAAAxF,EAAAM,GAAA,EAACkD,KAAAA,CAAAA,OAKZkC,IAAAA,EAAK6C,MAAM,EACR,GAAAvI,EAAAM,GAAA,EAACkI,EAAAA,CAAGA,CAAAA,CAAC/H,GAAI,CAAEgI,UAAW,QAAS,WAC3B,GAAAzI,EAAAC,IAAA,EAAC0L,IAAAA,WAAE,0CAAuC,GAAA3L,EAAAM,GAAA,EAACsL,EAAAA,CAAIA,CAAAA,CAACzK,OAAO,SAAS8G,KAAK,sCAA6B,oBAKtH,CAAC,SApFF,KAkGFqC,GAAUA,EAAOvE,IAAI,CAClB,GAAA/F,EAAAM,GAAA,EAACuL,EAAAA,CAAIA,CAAAA,CAACzC,MAAO,CAAE8B,gBAAiBZ,EAAO5I,KAAK,CAAEA,MAAO,OAAQ,EAAG2F,MAAOiD,EAAOvE,IAAI,CAAEtF,GAAIA,EAAIc,QAASA,IAErG,GAAAvB,EAAAM,GAAA,EAACuL,EAAAA,CAAIA,CAAAA,CAACxE,MAAO,gBAAiB5G,GAAIA,EAAIc,QAASA,MAKnE,0JCzLO,IAAMoI,EAAY,GACd,EAAEuB,gBAAiBtB,EAASkC,cAAc,CAAG,UAAY,SAAU,GAGjE5C,EAAkB,CAAC6C,EAAqBC,IAE7C,GAAAhM,EAAAM,GAAA,EAAC2L,EAAAA,EAASA,CAAAA,CAACF,YAAaA,WACnB,CAACG,EAAUtC,IACR,GAAA5J,EAAAC,IAAA,EAACkJ,MAAAA,CACGgD,IAAKD,EAASE,QAAQ,CACrB,GAAGF,EAASG,cAAc,WAE1BL,EAAcpC,GACdsC,EAAStL,WAAW,MAQ5BiI,EAAiB,CAACC,EAAQzD,KACnC,IAAMiH,EAAOxD,EAAOyD,WAAW,CACzB,CAAEC,YAAAA,CAAW,CAAE,CAAG1D,EAKxB,GAAIwD,EAAM,CACN,GAAM,CAAEP,YAAAA,CAAW,CAAE,CAAGO,EAExB,GAAIP,qBAAAA,GAAsC1G,GAASA,EAAMoH,OAAO,CAAE,CAC9D,IAAMC,EAASrH,EAAMoH,OAAO,CAACE,SAAS,GAChCC,EAAYF,EAAOG,YAAY,GAEjCC,EAAiBJ,EAAOK,SAAS,GAEjCH,GACAE,CAAAA,EAAiBJ,EAAOG,YAAY,GAAG5K,KAAK,EAGhDyK,EAAOM,UAAU,CAACF,EAhBVN,EAiBZ,CACJ,CACJ,CAiDA/N,CAAAA,EAAAwO,EAAA,CA/Ca,KACT,GAAM,CAACC,EAAMC,EAAQ,CAAGjO,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,EAAE,EAEnCa,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACNP,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CACXC,KAAM,4BACNE,OAAQ,KACZ,GAAGC,IAAI,CAAC,IACJuN,EAAQtN,EAASqN,IAAI,CACzB,EACJ,EAAG,EAAE,EAEL,IAAME,EAAa,IAEX,GAAApN,EAAAM,GAAA,EAAAN,EAAAE,QAAA,WACKgN,EAAKnL,GAAG,CAAC,CAACsL,EAAKpL,IACZ,GAAAjC,EAAAM,GAAA,EAACgN,EAAAA,EAASA,CAAAA,CAACd,YAAaa,EAAIrM,KAAK,CAAEiB,MAAOA,WACrC,GACG,GAAAjC,EAAAM,GAAA,EAAC6I,MAAAA,CACGgD,IAAKD,EAASE,QAAQ,CACrB,GAAGF,EAASqB,cAAc,CAC1B,GAAGrB,EAASsB,eAAe,UAE5B,GAAAxN,EAAAM,GAAA,EAAC6I,MAAAA,CAAIC,MAAO,CAAE8B,gBAAiB,UAAW9J,QAAS,MAAOqM,aAAc,oBAAqB5C,OAAQ,MAAO,WACvGwC,EAAIK,IAAI,UAUzC,MACI,GAAA1N,EAAAM,GAAA,EAAAN,EAAAE,QAAA,WACKgJ,EAAgB,UAAW,IAEpB,GAAAlJ,EAAAM,GAAA,EAAAN,EAAAE,QAAA,WACKkN,QAMzB,qHCxFA,IAAMO,EAAsB,CAAElB,QAAS,IAAK,EAOtCmB,EAAmB,GACdpO,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CAAEC,KAAM,yBAAgCC,MAAA,CAAPmO,GAAUlO,OAAQ,KAAM,EAyHnFlB,CAAAA,EAAAC,CAAA,CA7GA,SAA0BK,CAAyG,KAAzG,CAAEkK,SAAAA,CAAQ,CAAE3H,SAAAA,EAAS,EAAK,CAAE+F,MAAAA,EAAM,gBAAgB,CAAE2B,aAAAA,CAAY,CAAE8E,eAAAA,CAAc,CAAEC,eAAAA,CAAc,CAAS,CAAzGhP,EAClB,CAACC,EAASC,EAAW,CAAG+O,EAAAA,QAAc,CAAC,IACvC,CAAChN,EAAOiN,EAAS,CAAGD,EAAAA,QAAc,CAAahF,GAC/C,CAACkF,EAAYC,EAAc,CAAGH,EAAAA,QAAc,CAAC,IAC7C,CAACI,EAASC,EAAW,CAAGL,EAAAA,QAAc,CAAiB,EAAE,EAEzDM,EAAQN,EAAAA,OAAa,CACzB,IACEO,CAAAA,EAAAA,EAAAA,CAAAA,EAAS,CAACC,EAA4BC,KACpCxP,EAAW,IAEV0O,EAAoBlB,OAAO,CAASmB,gBAAgB,CAACY,EAAQE,KAAK,EAAE9O,IAAI,CAAC,IACxEX,EAAW,IACXwP,EAASjN,EAAKkE,IAAI,CACpB,GAAGC,KAAK,CAAC,IACPC,CAAAA,EAAAA,EAAAA,CAAAA,EAAO9F,EAAM+F,OAAO,EACpB5G,EAAW,IACXwP,EAAS,EAAE,CACb,EACF,EAAG,KACL,EAAE,EAGEE,EAAsB,IAC1B,IAAIC,EAA6B,EAAE,CAE/B5N,GACF4N,CAAAA,EAAa,CAAC5N,EAAM,EAGlB0F,GACFkI,CAAAA,EAAa,IAAIA,KAAelI,EAAQ,EAG1C2H,EAAWO,EACb,EA2BA,OAzBAZ,EAAAA,SAAe,CAAC,KACd,IAAIa,EAAS,GAQb,GANKlB,EAAoBlB,OAAO,EAC9BkB,CAAAA,EAAoBlB,OAAO,CAAG,CAC5BmB,iBAAAA,CACF,GAGEM,KAAAA,EAAmB,CACrBG,EAAWrN,EAAQ,CAACA,EAAM,CAAG,EAAE,EAC/B,MACF,CAQA,OANAsN,EAAM,CAAEI,MAAOR,CAAW,EAAG,IACvBW,GACFF,EAAoBjI,EAExB,GAEO,KACLmI,EAAS,EACX,CACF,EAAG,CAAC7N,EAAOkN,EAAYI,EAAM,EAG3B,GAAAtO,EAAAM,GAAA,EAACwO,EAAAA,CAAYA,CAAAA,CACXC,qBAAsB,CAACC,EAAQhO,IAAUgO,EAAOlM,KAAK,GAAK9B,EAAM8B,KAAK,CACrEmM,eAAgB,GAAYD,EAAOlM,KAAK,CACxCsL,QAASA,EACTc,aAAY,GACZ5N,SAAUA,EACV6N,mBAAkB,GAClBC,sBAAqB,GACrBpO,MAAOA,EACPqO,cAAc,uBACdpO,SAAU,CAACqO,EAAQC,KACjBlB,EAAWkB,EAAW,CAACA,KAAanB,EAAQ,CAAGA,GAC/CH,EAASsB,GAETtG,EAASsG,EACX,EACAC,cAAe,CAACF,EAAQG,KACtBtB,EAAcsB,EAChB,EACAC,YAAa,GACX,GAAA1P,EAAAM,GAAA,EAACK,EAAAA,CAASA,CAAAA,CACRoK,GAAG,oBACHtK,GAAIqN,EACH,GAAG6B,CAAM,CACVtI,MAAOA,EACPuI,gBAAiB,CACfxG,MAAO,CACLyG,IAAK,OACP,CACF,EACAC,WAAY,CACV,GAAGH,EAAOG,UAAU,CACpBC,aACE,GAAA/P,EAAAC,IAAA,EAAC+N,EAAAA,QAAc,YACZhP,EAAU,GAAAgB,EAAAM,GAAA,EAAC0P,EAAAA,CAAgBA,CAAAA,CAACtO,MAAM,UAAUyG,KAAM,KAAS,KAC3DwH,EAAOG,UAAU,CAACC,YAAY,IAGnC3G,MAAO2E,CACT,KAKV,yGCnEAtP,CAAAA,EAAAC,CAAA,CA7DoB,OAAC,CAAEuC,SAAAA,CAAQ,CAAyC,CAAAlC,EAChEkR,EAASC,CAAAA,EAAAA,EAAAA,SAAAA,IAET,CAAErC,OAAAA,CAAM,CAAE,CAAGoC,EAAOE,KAAK,CAEzB,CAACnP,EAAOiN,EAAS,CAAG/O,CAAAA,EAAAA,EAAAA,QAAAA,EAAS2O,GAE7B,CAACuC,EAAeC,EAAiB,CAAGnR,CAAAA,EAAAA,EAAAA,QAAAA,EAAS2O,EAAS,OAAS,QA0BrE,MACI,GAAA7N,EAAAM,GAAA,EAACK,EAAAA,CAASA,CAAAA,CACRwH,KAAK,QACL1G,QAAQ,WACRR,SA5Be,IACnBgN,EAASqC,EAAMnP,MAAM,CAACH,KAAK,CAC7B,EA2BMA,MAAOA,EACPuP,UApBqB,IACzB,GAAIrP,UAAAA,EAAEsP,GAAG,CAAc,CACrB,IAAMxP,EAAQE,EAAEC,MAAM,CAACH,KAAK,CAE5BqP,EAAiBrP,KAAAA,EAAe,OAAS,QAErCC,EACFA,EAASD,GAETiP,EAAOQ,IAAI,CAAC,WAAiB/Q,MAAA,CAANsB,GAE3B,CACF,EASMoI,MAAO,CAAEhG,MAAO,QAAS1C,YAAa,KAAM,EAC5CE,YAAY,aACZkP,WAAY,CACVY,eACE,GAAA1Q,EAAAM,GAAA,EAACqQ,EAAAA,CAAcA,CAAAA,CAACC,SAAS,iBACvB,GAAA5Q,EAAAM,GAAA,EAACuQ,EAAAA,CAAUA,CAAAA,CAAAA,KAGfd,aACE,GAAA/P,EAAAM,GAAA,EAACqQ,EAAAA,CAAcA,CAAAA,CACbC,SAAS,MACTxH,MAAO,CAAE4B,QAASoF,CAAc,WAEhC,GAAApQ,EAAAM,GAAA,EAACwQ,EAAAA,CAASA,CAAAA,CAACvP,QAxCH,KAClB0M,EAAS,IACToC,EAAiB,QACjBJ,EAAOQ,IAAI,CAAE,WACf,EAoC6ChQ,GAAI,CAAEoK,OAAQ,SAAU,KAG/D,GAGR,4DCdApM,CAAAA,EAAAC,CAAA,CAxCgB,OAAC,CAAEqS,SAAAA,CAAQ,CAAEC,KAAAA,CAAI,CAAEC,YAAAA,CAAW,CAAEC,gBAAAA,CAAe,CAAS,CAAAnS,EAC9DkR,EAASC,CAAAA,EAAAA,EAAAA,SAAAA,IACTiB,EAAaH,GAAQf,EAAOE,KAAK,CAACa,IAAI,EAAI,EAE1C,CAACI,EAAWnS,EAAW,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACnC,CAACwG,EAAMgF,EAAQ,CAAGxL,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,EAAE,EAC7B,CAACmS,EAAYC,EAAc,CAAGpS,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,GAEvCyL,EAAY,UACdnL,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CACXC,KAAM,IAAqB0R,MAAAA,CAAjBJ,EAAS,UAAqBE,MAAAA,CAAbE,GAAyBzR,MAAA,CAAZuR,GACxCtR,OAAQ,KACZ,GAAGC,IAAI,CAAC,IACJX,EAAW,IAENY,EAASC,KAAK,GACfwR,EAAczR,EAASwR,UAAU,EACjC3G,EAAQ7K,EAAS6F,IAAI,EAE7B,EACJ,EASA,MAPA3F,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACFkQ,EAAOsB,OAAO,GACdtS,EAAW,IACX0L,IAER,EAAG,CAACwG,EAAYlB,EAAOsB,OAAO,IAAML,GAAmB,EAAE,CAAE,EAEpD,CACHF,KAAMG,EACNxG,UAAAA,EACAyG,UAAAA,EACA1L,KAAAA,EACA2L,WAAAA,EACA3G,QAAAA,EACA4G,cAAAA,CACJ,CACJ","sources":["webpack://_N_E/./components/Feed.tsx","webpack://_N_E/./components/SendEmail.tsx","webpack://_N_E/./components/common/CandidateStatusChanger.tsx","webpack://_N_E/./components/common/Tags.tsx","webpack://_N_E/./components/job/JobSearch.tsx","webpack://_N_E/./components/job/SearchInput.tsx","webpack://_N_E/./hooks/useList.ts","webpack://_N_E/<anon>"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport TimelineIcon from '@mui/icons-material/Timeline';\nimport { Button, Grid, LinearProgress, TextField, Tooltip, Avatar } from '@mui/material';\nimport Timeline from '@mui/lab/Timeline';\nimport TimelineItem from '@mui/lab/TimelineItem';\nimport TimelineSeparator from '@mui/lab/TimelineSeparator';\nimport TimelineConnector from '@mui/lab/TimelineConnector';\nimport TimelineContent from '@mui/lab/TimelineContent';\nimport TimelineOppositeContent, { timelineOppositeContentClasses } from '@mui/lab/TimelineOppositeContent';\nimport TimelineDot from '@mui/lab/TimelineDot';\nimport { sendApiRequest, readFile } from '../lib/api/public';\nimport CheckIcon from '@mui/icons-material/Check';\n\ntype Props = {\n    jobId?: string;\n    candidateId?: string;\n    updateHash?: string;\n    renderItem: (log) => React.ReactNode;\n}\n\nconst Feed = ({ jobId, candidateId, updateHash, renderItem }: Props) => {\n    const [loading, setLoading] = useState(false);\n    const [activityLogs, setActivityLogs] = useState([]);\n    const [note, setNote] = useState('');\n\n    const getActivityLogs = () => {\n        setLoading(true);\n\n        sendApiRequest({\n            path: `/${jobId ? 'jobs' : 'candidates'}/get-activity-logs?jobId=${jobId}&candidateId=${candidateId}`,\n            method: 'GET',\n        }).then((response: any) => {\n            setLoading(false);\n\n            if (!response.error) {\n                setActivityLogs(response)\n            }\n        })\n    }\n\n    const saveNote = () => {\n        sendApiRequest({\n            path: `/activity-logs/create-note`,\n            method: 'POST',\n            data: {\n                jobId,\n                candidateId,\n                note,\n            }\n        }).then((response: any) => {\n            if (!response.error) {\n                setNote('');\n                getActivityLogs();\n            }\n        })\n    }\n\n    useEffect(() => {\n        getActivityLogs();\n    }, [jobId, candidateId, updateHash])\n\n    return (\n        <>\n            <Grid container justifyContent=\"space-between\">\n                <Grid item flex={1} sx={{ marginRight: '10px' }}>\n                    <TextField\n                        placeholder='Add a quick note.'\n                        fullWidth\n                        multiline\n                        minRows={1}\n                        value={note}\n                        onChange={(e) => setNote(e.target.value)}\n                        sx={{\n                            '& .MuiInputBase-root': {\n                                padding: '8px 10px',\n                            },\n                        }}\n                    />\n                </Grid>\n\n                <Grid item>\n                    <Button\n                        disabled={note === ''}\n                        onClick={saveNote} variant=\"contained\" color=\"success\">\n                        <CheckIcon />\n                    </Button>\n                </Grid>\n            </Grid>\n\n            <Timeline\n                sx={{\n                    [`& .${timelineOppositeContentClasses.root}`]: {\n                        flex: 0.2,\n                    },\n                }}\n            >\n                {activityLogs.map((log, index) => {\n                    return (\n                        <TimelineItem key={index}>\n                            <TimelineOppositeContent\n                                sx={{ m: 'auto 0' }}\n                                variant=\"body2\"\n                                color=\"text.secondary\"\n                            >\n                                {moment(log.createdAt).format('YYYY/MM/DD')}\n                            </TimelineOppositeContent>\n                            <TimelineSeparator>\n                                <TimelineConnector />\n                                <TimelineDot>\n                                    {\n                                        log.user && log.user.avatarUrl ?\n                                            (\n                                                <Tooltip title={`${log.user.firstName} ${log.user.lastName}`}>\n                                                    <Avatar src={readFile(log.user.avatarUrl)} sx={{ width: '30px', height: '30px' }} />\n                                                </Tooltip>\n                                            )\n                                            : (\n                                                <TimelineIcon />\n                                            )\n                                    }\n                                </TimelineDot>\n                                <TimelineConnector />\n                            </TimelineSeparator>\n                            <TimelineContent>\n                                <br />\n                                {renderItem(log)}\n                            </TimelineContent>\n                        </TimelineItem>\n                    )\n                })}\n\n            </Timeline>\n\n            {loading ? <LinearProgress /> : null}\n        </>\n    );\n};\n\nexport default Feed;\n","import React, { useState, useRef, useEffect } from 'react';\nimport moment from 'moment';\nimport { sendApiRequest } from '../lib/api/public';\nimport { Button, TextField, Grid, LinearProgress, Dialog, DialogTitle, DialogContent, TableContainer, Table, TableHead, TableBody, TableRow, TableCell, IconButton, Box } from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { DragDropContext } from '@hello-pangea/dnd';\nimport { renderField } from './utils';\nimport notify from 'lib/notify';\nimport Editor from 'components/common/Editor';\nimport JobSearch, { Job } from 'components/job/JobSearch';\nimport Files from 'components/common/Files';\nimport Uploader from 'components/common/Uploader';\nimport Tags, { renderDroppable, dropStyle, addTagToEditor } from 'components/common/Tags';\nimport confirm from 'lib/confirm';\n\ntype Props = {\n    candidateId?: string;\n    jobId?: string;\n    to?: string;\n}\n\nconst SendEmail = ({ jobId, candidateId, to }: Props) => {\n    const [job, setJob] = useState<Job | null>(null);\n    const [loading, setLoading] = useState(false);\n    const [sending, setSending] = useState(false);\n    const [regardingJobId, setRegardingJobId] = useState('');\n    const [receipients, setReceipients] = useState('');\n    const [attachments, setAttachments] = useState([]);\n    const [subject, setSubject] = useState('');\n    const [body, setBody] = useState('');\n\n    const [showTemplateForm, setShowTemplateForm] = useState(false);\n    const [showTemplates, setShowTemplates] = useState(false);\n    const [templateName, setTemplateName] = useState('');\n    const [templates, setTemplates] = useState([]);\n    const [jobSearchHash, setJobSearchHash] = useState(Math.random());\n\n    let quill = useRef(null);\n\n    const getJob = () => {\n        setLoading(true);\n\n        sendApiRequest({\n            path: `/jobs/detail?_id=${jobId}`,\n            method: 'get'\n        }).then((response: any) => {\n            setLoading(false);\n\n            if (!response.error) {\n                setJob(response);\n                setRegardingJobId(response._id);\n            }\n        })\n    }\n\n    const getTemplates = () => {\n        sendApiRequest({\n            path: `/email-templates/list`,\n            method: 'get'\n        }).then((response: any) => {\n            if (!response.error) {\n                setTemplates(response.list);\n            }\n        }).catch((error) => {\n            notify(error.message);\n            setTemplates([]);\n        })\n    }\n\n    useEffect(() => {\n        if (jobId) {\n            getJob();\n        }\n    }, [jobId]);\n\n    useEffect(() => {\n        setReceipients(to || '');\n    }, [to]);\n\n    const saveAsTemplate = () => {\n        if (!templateName) {\n            notify('Please fill the required fields');\n            return;\n        }\n\n        sendApiRequest({\n            path: `/email-templates/manage`,\n            method: 'POST',\n            data: {\n                name: templateName,\n                regardingJobId,\n                receipients,\n                subject,\n                body,\n                attachments\n            }\n        }).then((response: any) => {\n            if (!response.error) {\n                notify('Success');\n                setShowTemplateForm(false);\n            }\n        }).catch((error) => {\n            notify(error.message);\n        })\n    }\n\n    const deleteTemplate = (templateId) => {\n        sendApiRequest({\n            path: `/email-templates/manage`,\n            method: 'POST',\n            data: {\n                action: 'remove',\n                _id: templateId\n            }\n        }).then((response: any) => {\n            if (!response.error) {\n                getTemplates();\n            }\n        })\n    }\n\n    const send = () => {\n        if (!receipients || !subject || !body) {\n            notify('Please fill the required fields');\n            return;\n        }\n\n        setSending(true);\n\n        sendApiRequest({\n            path: `/emails/send`,\n            method: 'POST',\n            data: {\n                candidateId,\n                regardingJobId,\n                receipients,\n                subject,\n                body,\n                attachments\n            }\n        }).then((response: any) => {\n            setSending(false);\n\n            if (!response.error) {\n                notify('Success');\n            }\n        }).catch((error) => {\n            setSending(false);\n            notify(error.message);\n        })\n    }\n\n    const onDragEnd = (result) => {\n        addTagToEditor(result, quill);\n    }\n\n    const removeAttchment = (attachment) => {\n        setAttachments(attachments.filter((a) => a.url !== attachment.url));\n    }\n\n    const addAttachments = (results) => {\n        setAttachments([...attachments, ...results]);\n    }\n\n    const useTemplate = (template) => {\n        setJobSearchHash(Math.random());\n        setRegardingJobId(template.regardingJobId);\n        setReceipients(template.receipients);\n        setSubject(template.subject);\n        setBody(template.body);\n        setAttachments(template.attachments);\n\n        setShowTemplates(false);\n    }\n\n    const renderTemplateForm = () => {\n        if (!showTemplateForm) {\n            return null;\n        }\n\n        return (\n            <Dialog open={showTemplateForm} onClose={() => setShowTemplateForm(false)} fullScreen sx={{ width: '50%', left: 'inherit' }}>\n                <DialogTitle>Save as template</DialogTitle>\n                <DialogContent>\n                    <br />\n\n                    {renderField({ label: 'Template name', required: true, renderControl: () =>\n                        <TextField value={templateName} onChange={(e) => setTemplateName(e.target.value)} fullWidth />,\n                    })}\n\n                    <Button\n                        onClick={() => {\n                            setShowTemplateForm(false);\n                        }}\n                        color=\"inherit\"\n                        variant=\"contained\">\n                        Cancel\n                    </Button>\n\n                    {' '}\n\n                    <Button\n                        onClick={() => {\n                            saveAsTemplate();\n                        }}\n                        color=\"success\"\n                        variant=\"contained\">\n                        Save\n                    </Button>\n                </DialogContent>\n            </Dialog>\n        )\n    }\n\n    const renderTemplates = () => {\n        if (!showTemplates) {\n            return null;\n        }\n\n        return (\n            <Dialog open={showTemplates} onClose={() => setShowTemplates(false)} fullScreen sx={{ width: '50%', left: 'inherit' }}>\n                <DialogTitle>\n                    <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n                        <Grid item>\n                            Load Template\n                        </Grid>\n\n                        <Grid item>\n                            <IconButton onClick={() => setShowTemplates(false)}>\n                                <CloseIcon />\n                            </IconButton>\n                        </Grid>\n                    </Grid>\n                </DialogTitle>\n\n                <DialogContent>\n                    <TableContainer>\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Name</TableCell>\n                                    <TableCell>Created at</TableCell>\n                                    <TableCell>Modified at</TableCell>\n                                    <TableCell></TableCell>\n                                </TableRow>\n                            </TableHead>\n\n                            <TableBody>\n                                {templates.map((template) => (\n                                    <TableRow>\n                                        <TableCell>\n                                            <a href=\"#\" onClick={() => useTemplate(template)}>\n                                                {template.name}\n                                            </a>\n                                        </TableCell>\n                                        <TableCell>{moment(template.createdAt).format('DD/MM/YYYY HH:mm')}</TableCell>\n                                        <TableCell>{template.updatedAt ? moment(template.updatedAt).format('DD/MM/YYYY HH:mm') : moment(template.createdAt).format('DD/MM/YYYY HH:mm')}</TableCell>\n                                        <TableCell>\n                                            <Button\n                                                size='small'\n                                                color='error'\n                                                variant='contained'\n                                                onClick={() => {\n                                                    confirm({\n                                                        title: 'Are you sure you want to delete this template?',\n                                                        message: 'This action cannot be undone.',\n                                                        onAnswer: (answer) => {\n                                                            if (answer) {\n                                                                deleteTemplate(template._id);\n                                                            }\n                                                        }\n                                                    })\n                                                }}\n                                            >\n                                                Remove\n                                            </Button>\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n\n                    {\n                        templates.length === 0 ?\n                            <Box sx={{ textAlign: 'center', marginTop: '20px' }}>No templates found</Box>\n                            : null \n                    }\n                </DialogContent>\n            </Dialog>\n        )\n    }\n\n    if (loading) {\n        return <LinearProgress />;\n    }\n\n    return (\n        <>\n            {renderTemplateForm()}\n            {renderTemplates()}\n\n            <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n                <Grid item></Grid>\n\n                <Grid item>\n                    <Button\n                        size='small'\n                        onClick={() => {\n                            setShowTemplates(true);\n                            getTemplates();\n                        }}\n                        variant=\"contained\">\n                        Load template\n                    </Button>\n\n                    {'  '}\n\n                    <Button\n                        size='small'\n                        onClick={() => {\n                            setShowTemplateForm(true);\n                            setTemplateName('');\n                        }}\n                        variant=\"contained\">\n                        Save as template\n                    </Button>\n\n                    {'  '}\n\n                    <Button\n                        size='small'\n                        color='success'\n                        onClick={() => {\n                            send();\n                        }}\n                        disabled={sending}\n                        variant=\"contained\">\n                        {sending ? 'Sending...' : 'Send'}\n                    </Button>\n                </Grid>\n            </Grid>\n\n            <br />\n            <DragDropContext onDragEnd={onDragEnd}>\n                {renderField({ label: 'Regarding', renderControl: () =>\n                    <JobSearch\n                        key={jobSearchHash}\n                        defaultValue={job}\n                        onSelect={(job) => {\n                            setRegardingJobId(job ? job._id : '');\n                        }}\n                    />,\n                })}\n\n                {renderField({ label: 'To (BCC)', required: true, renderControl: () =>\n                    <TextField value={receipients} onChange={(e) => setReceipients(e.target.value)} fullWidth />,\n                })}\n\n                {renderField({ label: 'Subject', required: true, renderControl: () =>\n                    <TextField value={subject} onChange={(e) => setSubject(e.target.value)} fullWidth />,\n                })}\n\n                {renderField({ label: 'Body', required: true, renderControl: () => {\n                    return (\n                        <>\n                            {renderDroppable('initial', () => {\n                                return (\n                                    <div style={{ width: '28%', float: 'right', marginTop: '-20px', fontSize: '12px' }}>\n                                        <h3>Tags</h3>\n\n                                        <div style={{ height: '400px', overflow: 'scroll' }}>\n                                            <Tags />\n                                        </div>\n                                    </div>\n                                )\n                            })}\n\n                            <div style={{ width: '70%', float: 'left' }}>\n                                {renderDroppable('droppable-editor', (snapshot) => {\n                                    return (\n                                        <Editor\n                                            style={{ height: '300px', ...dropStyle(snapshot) }}\n                                            value={body}\n                                            onChange={(value) => setBody(value)}\n                                            renderExtraContent={(quillRef) => {\n                                                quill = quillRef;\n                                                return null;\n                                            }}\n                                        />\n                                    )\n                                })}\n\n                                <br /><br /><br /><br />\n\n                                <Files\n                                    title=''\n                                    files={attachments}\n                                    onDelete={(attachment) => {\n                                        removeAttchment(attachment)\n                                    }}\n                                    rightSide={(\n                                        <>\n                                            <Uploader\n                                                label='Add atachment'\n                                                showList={false}\n                                                onChange={(results) => {\n                                                    addAttachments(results);\n                                                }}\n                                            />\n                                        </>\n                                    )}\n                                />\n\n                            </div>\n                        </>\n                    )\n                }})}\n            </DragDropContext>\n        </>\n    );\n};\n\nexport default SendEmail;\n","import React, { useEffect, useState } from 'react';\nimport Link from '@mui/material/Link';\nimport { Button, Box, Chip, Dialog, DialogContent, DialogTitle, IconButton, TextField } from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\nimport ListIcon from '@mui/icons-material/List';\nimport { renderField } from '../utils';\nimport { sendApiRequest } from '../../lib/api/public';\nimport notify from '../../lib/notify';\n\ntype Status = {\n    _id: string;\n    name: string;\n    color: string;\n}\n\ntype Props = {\n    candidateId: string;\n    jobId: string;\n    onSuccess: () => void\n    status?: Status;\n}\n\nconst CandidateStatusChanger = ({ candidateId, jobId, onSuccess, status }: Props) => {\n    const [loading, setLoading] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [statusId, setStatusId] = useState('');\n    const [note, setNote] = useState('');\n    const [list, setList] = useState<Status[]>([]);\n\n    const fetchList = async () => {\n        sendApiRequest({\n            path: `/candidates/statuses`,\n            method: 'GET',\n        }).then((response: any) => {\n            setLoading(false);\n\n            if (!response.error) {\n                setList(response.list);\n            }\n        }).catch(e => {\n            notify(e.message);\n        })\n    };\n\n    const onSave = async () => {\n        setLoading(true);\n\n        try {\n            await sendApiRequest({\n                path: '/candidates/change-job-order-status',\n                method: 'POST',\n                data: {\n                    candidateId,\n                    jobId,\n                    statusId,\n                    note,\n                }\n            });\n\n            setOpen(false);\n\n            onSuccess();\n\n            setLoading(false);\n        } catch (error) {\n            setLoading(false);\n            notify(error);\n        }\n\n    };\n\n    useEffect(() => {\n        setLoading(true);\n\n        fetchList();\n    }, []);\n\n    const onClose = () => {\n        setOpen(false);\n    }\n\n    const renderPopup = () => {\n        if (!open) {\n            return null;\n        }\n\n        return (\n            <Dialog onClose={onClose} aria-labelledby=\"modal-title\" open fullScreen style={{ width: '40%', left: 'inherit' }}>\n                <DialogTitle id=\"modal-title\">\n                    <Box display=\"flex\" alignItems=\"center\">\n                        <Box flexGrow={1}>Change status</Box>\n                        <Box>\n                            <IconButton onClick={onClose}>\n                                <CloseIcon />\n                            </IconButton>\n\n                            <Button variant=\"contained\" color=\"success\" onClick={onSave} disabled={loading}>\n                                {loading ? 'Saving...' : 'Save'}\n                            </Button>\n                        </Box>\n                    </Box>\n                </DialogTitle>\n\n                <DialogContent style={{ backgroundColor: '#f8f8f8' }}>\n                    <br /><br />\n\n                    {renderField({ label: 'Notes', renderControl: () => {\n                        return <TextField multiline minRows={5} fullWidth value={note} onChange={(e) => setNote(e.target.value)} />\n                    }})}\n\n                    {renderField({ label: 'Status', renderControl: () => {\n                        if (statusId) {\n                            const object = list.find((item) => item._id === statusId);\n\n                            return (\n                                <div style={{ display: 'flex', alignItems: 'center' }}>\n                                    <div className='candidate-status-choices'>\n                                        <div className='circle' style={{ backgroundColor: object.color }} />\n                                        {object.name}\n                                    </div>\n\n                                    <div\n                                        style={{\n                                            marginLeft: '10px',\n                                            cursor: 'pointer',\n                                            backgroundColor: '#dfdfdf',\n                                            padding: '4px 8px',\n                                            paddingBottom: '0px',\n                                            borderRadius: '15px'\n                                        }}\n                                        onClick={() => {\n                                            setStatusId(null);\n                                        }}\n                                    >\n                                        <ListIcon  />\n                                    </div>\n                                </div>\n                            )\n                        }\n\n                        return (\n                            <>\n                                {list.map((status) => {\n                                    return (\n                                        <>\n                                            <div\n                                                key={status._id}\n                                                className='candidate-status-choices'\n                                                onClick={() => setStatusId(status._id)}\n                                                >\n\n                                                <div className='circle' style={{ backgroundColor: status.color }} />\n                                                <span>{status.name}</span>\n                                            </div>\n\n                                            <br />\n                                        </>\n                                    )\n                                })}\n\n                                {list.length === 0 && (\n                                    <Box sx={{ textAlign: 'center' }}>\n                                        <p>No statuses. Please create a status in <Link target=\"_blank\" href=\"/settings/candidate-status\">Settings</Link></p>\n                                    </Box>\n                                )}\n                            </>\n                        )\n                    }})}\n                </DialogContent>\n            </Dialog>\n        )\n    }\n\n    const sx = { cursor: 'pointer' };\n    const onClick = () => setOpen(true);\n\n    return (\n        <>\n            {renderPopup()}\n\n            {\n                (status && status.name) ? (\n                    <Chip style={{ backgroundColor: status.color, color: 'white' }} label={status.name} sx={sx} onClick={onClick} />\n                ) : (\n                    <Chip label={'Change status'} sx={sx} onClick={onClick} />\n                )\n            }\n        </>\n    )\n};\n\nexport default CandidateStatusChanger;","import React, { useState, useEffect } from 'react';\nimport { Draggable, Droppable } from '@hello-pangea/dnd';\nimport { sendApiRequest } from 'lib/api/public';\n\nexport const dropStyle = (snapshot) => {\n    return { backgroundColor: snapshot.isDraggingOver ? '#ffffff' : 'inherit' }\n}\n\nexport const renderDroppable = (droppableId: string, renderContent: (snapshot) => React.ReactNode) => {\n    return (\n        <Droppable droppableId={droppableId}>\n            {(provided, snapshot) => (\n                <div\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                >\n                    {renderContent(snapshot)}\n                    {provided.placeholder}\n                </div>\n            )}\n        </Droppable>\n    )\n}\n\n\nexport const addTagToEditor = (result, quill) => {\n    const dest = result.destination;\n    const { draggableId } = result;\n\n    const newText = draggableId;\n\n\n    if (dest) {\n        const { droppableId } = dest;\n\n        if (droppableId === 'droppable-editor' && quill && quill.current) {\n            const editor = quill.current.getEditor();\n            const selection = editor.getSelection();\n\n            let cursorPosition = editor.getLength();\n\n            if (selection) {\n                cursorPosition = editor.getSelection().index;\n            }\n\n            editor.insertText(cursorPosition, newText);\n        }\n    }\n}\n\nconst Tags = () => {\n    const [tags, setTags] = useState([]);\n\n    useEffect(() => {\n        sendApiRequest({\n            path: '/candidates/statuses/tags',\n            method: 'GET'\n        }).then((response) => {\n            setTags(response.tags);\n        });\n    }, []);\n\n    const renderTags = () => {\n        return (\n            <>\n                {tags.map((tag, index) => (\n                    <Draggable draggableId={tag.value} index={index}>\n                        {(provided) => (\n                            <div\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                            >\n                                <div style={{ backgroundColor: '#f8f8f8', padding: '5px', borderBottom: '1px solid #e0e0e0', cursor: 'grab' }}>\n                                    {tag.text}\n                                </div>\n                            </div>\n                        )}\n                    </Draggable>\n                ))}\n            </>\n        );\n    }\n\n    return (\n        <>\n            {renderDroppable('initial', () => {\n                return (\n                    <>\n                        {renderTags()}\n                    </>\n                )\n            })}\n        </>\n    )\n};\n\nexport default Tags;\n","import React from 'react';\nimport { TextField } from '@mui/material';\nimport { sendApiRequest } from '../../lib/api/public';\nimport { Autocomplete, CircularProgress } from '@mui/material';\nimport { debounce } from '@mui/material/utils';\nimport notify from '../../lib/notify';\n\nconst autocompleteService = { current: null };\n\nexport interface Job {\n  _id: string;\n  title: string;\n}\n\nconst getJobsApiMethod = (search: string) => {\n    return sendApiRequest({ path: `/jobs/get-list?search=${search}`, method: 'get' });\n}\n\ntype Props = {\n  onSelect: (job: Job) => void,\n  disabled?: boolean,\n  label?: string,\n  defaultValue?: Job,\n  textFieldStyle?: React.CSSProperties,\n  inputPropStyle?: React.CSSProperties\n}\n\nfunction JobsAutoComplete({ onSelect, disabled=false, label='Job search ...', defaultValue, textFieldStyle, inputPropStyle }: Props) {\n  const [loading, setLoading] = React.useState(false);\n  const [value, setValue] = React.useState<Job | null>(defaultValue);\n  const [inputValue, setInputValue] = React.useState('');\n  const [options, setOptions] = React.useState<readonly Job[]>([]);\n\n  const fetch = React.useMemo(\n    () =>\n      debounce((request: { input: string }, callback: (results?: readonly Job[]) => void) => {\n        setLoading(true);\n\n        (autocompleteService.current as any).getJobsApiMethod(request.input).then((data) => {\n          setLoading(false);\n          callback(data.list);\n        }).catch((error) => {\n          notify(error.message);\n          setLoading(false);\n          callback([]);\n        });\n      }, 400),\n    [],\n  );\n\n  const setOptionsFromFetch = (results) => {\n    let newOptions: readonly Job[] = [];\n\n    if (value) {\n      newOptions = [value];\n    }\n\n    if (results) {\n      newOptions = [...newOptions, ...results];\n    }\n\n    setOptions(newOptions);\n  };\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current) {\n      autocompleteService.current = {\n        getJobsApiMethod,\n      };\n    }\n\n    if (inputValue === '') {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({ input: inputValue }, (results?: readonly Job[]) => {\n      if (active) {\n        setOptionsFromFetch(results);\n      }\n    });\n\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n\n  return (\n    <Autocomplete\n      isOptionEqualToValue={(option, value) => option.title === value.title}\n      getOptionLabel={(option) => option.title}\n      options={options}\n      autoComplete\n      disabled={disabled}\n      includeInputInList\n      filterSelectedOptions\n      value={value}\n      noOptionsText=\"Type a job title ...\"\n      onChange={(_event, newValue: Job | null) => {\n        setOptions(newValue ? [newValue, ...options] : options);\n        setValue(newValue);\n\n        onSelect(newValue);\n      }}\n      onInputChange={(_event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField\n          id=\"job-auto-complete\"\n          sx={textFieldStyle}\n          {...params}\n          label={label}\n          InputLabelProps={{\n            style: {\n              top: '-10px'\n            }\n          }}\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <React.Fragment>\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n            style: inputPropStyle,\n          }}\n        />\n      )}\n    />\n  );\n}\n\nexport default JobsAutoComplete;\n","import React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { InputAdornment, TextField } from '@mui/material';\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport ClearIcon from \"@mui/icons-material/Clear\";\n\nconst SearchInput = ({ onChange }: { onChange?: (value: string) => void}) => {\n  const router = useRouter();\n\n  const { search } = router.query;\n\n  const [value, setValue] = useState(search);\n\n  const [showClearIcon, setShowClearIcon] = useState(search ? 'flex' : 'none');\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  const handleClear = () => {\n    setValue('');\n    setShowClearIcon('none');\n    router.push(`?search=`);\n  };\n\n  const handleSearchChange = (e: any) => {\n    if (e.key === 'Enter') {\n      const value = e.target.value;\n\n      setShowClearIcon(value === \"\" ? \"none\" : \"flex\");\n\n      if (onChange) {\n        onChange(value);\n      } else {\n        router.push(`?search=${value}`);\n      }\n    }\n  };\n\n  return (\n      <TextField\n        size=\"small\"\n        variant=\"outlined\"\n        onChange={handleChange}\n        value={value}\n        onKeyDown={handleSearchChange}\n        style={{ width: '350px', marginRight: '5px' }}\n        placeholder='Search ...'\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <SearchIcon />\n            </InputAdornment>\n          ),\n          endAdornment: (\n            <InputAdornment\n              position=\"end\"\n              style={{ display: showClearIcon }}\n            >\n              <ClearIcon onClick={handleClear} sx={{ cursor: 'pointer' }} />\n            </InputAdornment>\n          )\n        }}\n      />\n    );\n};\n\nexport default SearchInput;\n","import { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { sendApiRequest } from '../lib/api/public';\n\ntype Props = {\n    endpoint: string;\n    extraParams?: string\n    page?: number,\n    useEffectParams?: any[]\n}\n\nconst useList = ({ endpoint, page, extraParams, useEffectParams }: Props) => {\n    const router = useRouter();\n    const pageNumber = page || router.query.page || 1;\n\n    const [isLoading, setLoading] = useState(false);\n    const [list, setList] = useState([]);\n    const [totalCount, setTotalCount] = useState(0);\n\n    const fetchList = async () => {\n        sendApiRequest({\n            path: `/${endpoint}?page=${pageNumber}${extraParams}`,\n            method: 'GET',\n        }).then((response: any) => {\n            setLoading(false);\n\n            if (!response.error) {\n                setTotalCount(response.totalCount);\n                setList(response.list);\n            }\n        })\n    };\n\n    useEffect(() => {\n        if (router.isReady) {\n            setLoading(true);\n            fetchList();\n        }\n    }, [pageNumber, router.isReady, ...(useEffectParams || [])]);\n\n    return {\n        page: pageNumber,\n        fetchList,\n        isLoading,\n        list,\n        totalCount,\n        setList,\n        setTotalCount\n    };\n};\n\nexport default useList;\n"],"names":["__webpack_exports__","Z","jobId","candidateId","updateHash","renderItem","param","loading","setLoading","useState","activityLogs","setActivityLogs","note","setNote","getActivityLogs","sendApiRequest","path","concat","method","then","response","error","useEffect","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Fragment","Grid","container","justifyContent","jsx","item","flex","sx","marginRight","TextField","placeholder","fullWidth","multiline","minRows","value","onChange","e","target","padding","Button","disabled","onClick","data","variant","color","CheckIcon","Timeline","timelineOppositeContentClasses","root","map","log","index","TimelineItem","TimelineOppositeContent","m","moment","createdAt","format","TimelineSeparator","TimelineConnector","TimelineDot","user","avatarUrl","Tooltip","title","firstName","lastName","Avatar","src","readFile","width","height","TimelineIcon","TimelineContent","br","LinearProgress","to","job","setJob","sending","setSending","regardingJobId","setRegardingJobId","receipients","setReceipients","attachments","setAttachments","subject","setSubject","body","setBody","showTemplateForm","setShowTemplateForm","showTemplates","setShowTemplates","templateName","setTemplateName","templates","setTemplates","jobSearchHash","setJobSearchHash","Math","random","quill","useRef","getJob","_id","getTemplates","list","catch","notify","message","saveAsTemplate","name","deleteTemplate","action","templateId","send","removeAttchment","filter","a","url","attachment","addAttachments","results","useTemplate","template","Dialog","open","onClose","fullScreen","left","DialogTitle","DialogContent","renderField","label","required","renderControl","alignItems","IconButton","CloseIcon","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","href","updatedAt","size","confirm","onAnswer","answer","length","Box","textAlign","marginTop","DragDropContext","onDragEnd","addTagToEditor","result","JobSearch","defaultValue","onSelect","renderDroppable","div","style","float","fontSize","h3","overflow","Tags","Editor","dropStyle","snapshot","renderExtraContent","quillRef","Files","files","onDelete","rightSide","Uploader","showList","onSuccess","status","setOpen","statusId","setStatusId","setList","fetchList","onSave","cursor","aria-labelledby","id","display","flexGrow","backgroundColor","object","find","className","marginLeft","paddingBottom","borderRadius","ListIcon","span","p","Link","Chip","isDraggingOver","droppableId","renderContent","Droppable","provided","ref","innerRef","droppableProps","dest","destination","draggableId","current","editor","getEditor","selection","getSelection","cursorPosition","getLength","insertText","ZP","tags","setTags","renderTags","tag","Draggable","draggableProps","dragHandleProps","borderBottom","text","autocompleteService","getJobsApiMethod","search","textFieldStyle","inputPropStyle","React","setValue","inputValue","setInputValue","options","setOptions","fetch","debounce","request","callback","input","setOptionsFromFetch","newOptions","active","Autocomplete","isOptionEqualToValue","option","getOptionLabel","autoComplete","includeInputInList","filterSelectedOptions","noOptionsText","_event","newValue","onInputChange","newInputValue","renderInput","params","InputLabelProps","top","InputProps","endAdornment","CircularProgress","router","useRouter","query","showClearIcon","setShowClearIcon","event","onKeyDown","key","push","startAdornment","InputAdornment","position","SearchIcon","ClearIcon","endpoint","page","extraParams","useEffectParams","pageNumber","isLoading","totalCount","setTotalCount","isReady"],"sourceRoot":""}