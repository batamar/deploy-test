{"version":3,"file":"static/chunks/1472-67075c196dbe511c.js","mappings":"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","sources":["webpack://_N_E/./components/job/StatusFilter.tsx","webpack://_N_E/./components/JobForm.tsx","webpack://_N_E/./components/JobPreview.tsx","webpack://_N_E/./pages/jobs.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import React from 'react';\nimport { useRouter } from 'next/router';\nimport { MenuItem, Select } from '@mui/material';\n\nconst StatusFilter = ({ onChange }: { onChange?: (value: string) => void}) => {\n  const router = useRouter();\n\n  const onChangeStatus = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    const value = event.target.value;\n\n    if (onChange) {\n      onChange(value === 'all' ? '' : value);\n    } else {\n      router.push(`?status=${value === 'all' ? '' : value}`);\n    }\n  };\n\n  return (\n    <Select\n        onChange={onChangeStatus}\n        defaultValue={onChange ? undefined : router.query.status || 'all'}\n        placeholder='Select status'\n        sx={{\n            '& .MuiSelect-select': {\n                width: '200px',\n                padding: '8px',\n            },\n        }}\n        >\n\n        <MenuItem value=\"all\">All</MenuItem>\n        <MenuItem value=\"active\">Active</MenuItem>\n        <MenuItem value=\"lead\">Lead</MenuItem>\n        <MenuItem value=\"draft\">Draft</MenuItem>\n        <MenuItem value=\"onHold\">On Hold</MenuItem>\n        <MenuItem value=\"canceled\">Canceled</MenuItem>\n        <MenuItem value=\"filled\">Filled</MenuItem>\n        <MenuItem value=\"closed\">Closed</MenuItem>\n    </Select>\n    );\n};\n\nexport default StatusFilter;\n","import React, { useEffect, useState } from 'react';\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    FormControl,\n    FormControlLabel,\n    FormLabel,\n    Grid,\n    IconButton,\n    MenuItem,\n    Radio,\n    RadioGroup,\n    Select,\n    TextField,\n} from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\nimport notify from 'lib/notify';\nimport { sendApiRequest } from 'lib/api/public';\nimport Editor from './common/Editor';\nimport ClientsAutoComplete from './common/ClientsAutocomplete';\nimport { renderField } from './utils';\n\ntype Job = {\n    _id: string,\n    status: string,\n    title: string,\n    description: string,\n    notes: string,\n    locationType: string;\n    location: string;\n    recruiterId: string;\n    clientName: string;\n    clientId: string;\n    minSalary: string;\n    maxSalary: string;\n}\n\ntype Props = {\n    onClose: () => void;\n    onSuccess: () => void;\n    open: boolean;\n    job?: Job\n};\n\nconst JobForm = ({ open, onClose, onSuccess, job }: Props) => {\n    const jobO = job || {} as Job;\n\n    const [title, setTitle] = useState(jobO.title);\n    const [status, setStatus] = useState(jobO.status);\n    const [description, setDescription] = useState(jobO.description);\n    const [notes, setNotes] = useState(jobO.notes);\n    const [locationType, setLocationType] = useState(jobO.locationType);\n    const [location, setLocation] = useState(jobO.location);\n    const [recruiterId, setRecruiterId] = useState(jobO.recruiterId);\n    const [clientId, setClientId] = useState(jobO.clientId);\n    const [users, setUsers] = useState([]);\n    const [minSalary, setMinSalary] = useState(jobO.minSalary);\n    const [maxSalary, setMaxSalary] = useState(jobO.maxSalary);\n    const [saving, setSaving] = useState(false);\n\n    const fetchUsers = async () => {\n        const response = await sendApiRequest({\n            path: '/users',\n            method: 'GET'\n        });\n\n        setUsers(response);\n    }\n\n    useEffect(() => {\n        fetchUsers();\n    }, [])\n\n    const onSave = async () => {\n        setSaving(true);\n\n        if (!title || !clientId || !location) {\n            notify('Please fill the required fields');\n            setSaving(false);\n            return;\n        }\n\n        try {\n            await sendApiRequest({\n                path: '/jobs/manage',\n                method: 'POST',\n                data: {\n                    _id: jobO._id,\n                    status,\n                    clientId,\n                    title,\n                    description,\n                    notes,\n                    locationType,\n                    location,\n                    recruiterId,\n                    minSalary,\n                    maxSalary,\n                }\n            });\n\n            onSuccess();\n\n            setSaving(false);\n        } catch (error) {\n            setSaving(false);\n            notify(error);\n        }\n\n    };\n\n    return (\n        <Dialog onClose={onClose} aria-labelledby=\"modal-title\" open={open} fullScreen style={{ width: '50%', left: 'inherit' }}>\n            <DialogTitle id=\"modal-title\">\n                <Box display=\"flex\" alignItems=\"center\">\n                    <Box flexGrow={1} >{ jobO.title ? 'Edit job' : 'Add Job'}</Box>\n                    <Box>\n                        <IconButton onClick={onClose}>\n                            <CloseIcon />\n                        </IconButton>\n\n                        <Button variant=\"contained\" color=\"success\" onClick={onSave} disabled={saving}>\n                            Save\n                        </Button>\n                    </Box>\n                </Box>\n            </DialogTitle>\n\n            <DialogContent style={{ backgroundColor: '#f8f8f8' }}>\n                <br />\n\n                {renderField({ label: 'Title', required: true, renderControl: () => \n                    <TextField value={title} onChange={(e) => setTitle(e.target.value)} fullWidth />\n                })}\n\n                {renderField({ label: 'Location', required: true, renderControl: () => {\n                    return (\n                        <TextField value={location} onChange={(e) => setLocation(e.target.value)} fullWidth />\n                    )\n                }})}\n\n                {renderField({ label: 'Location type', renderControl: () => {\n                    return (\n                        <RadioGroup\n                            row\n                            defaultValue=\"onSite\"\n                            value={locationType}\n                            name=\"radio-buttons-group\"\n                            onChange={(e) => { setLocationType(e.target.defaultValue) }}\n                        >\n                            <FormControlLabel value=\"OnSite\" control={<Radio />} label=\"On-site\" />\n                            <FormControlLabel value=\"Hybrid\" control={<Radio />} label=\"Hybrid\" />\n                            <FormControlLabel value=\"Remote\" control={<Radio />} label=\"Remote\" />\n                        </RadioGroup>\n                    )\n                }})}\n\n                {renderField({ label: 'Recruiter', renderControl: () => \n                    <Select\n                        fullWidth\n                        defaultValue={jobO.recruiterId}\n                        onChange={(e) => setRecruiterId(e.target.value)}\n                        labelId=\"recruiter-select-label\"\n                    >\n\n                        {users.map((user) => {\n                            return <MenuItem value={user._id}>{user.email}</MenuItem>\n                        })}\n                    </Select>\n                })}\n\n                {renderField({ label: 'Status', renderControl: () => {\n                    return (\n                        <Select\n                            labelId='status-select-label'\n                            defaultValue={jobO.status}\n                            onChange={(e) => setStatus(e.target.value)}\n                            fullWidth\n                        >\n                            <MenuItem value=\"active\">Active</MenuItem>\n                            <MenuItem value=\"lead\">Lead</MenuItem>\n                            <MenuItem value=\"draft\">Draft</MenuItem>\n                            <MenuItem value=\"onHold\">On Hold</MenuItem>\n                            <MenuItem value=\"canceled\">Canceled</MenuItem>\n                            <MenuItem value=\"filled\">Filled</MenuItem>\n                            <MenuItem value=\"closed\">Closed</MenuItem>\n                        </Select>\n                    )\n                }})}\n\n                {renderField({ label: 'Client', required: true, renderControl: () => {\n                    return (\n                        <>\n                            <span>{jobO.clientName}</span>\n                            <ClientsAutoComplete\n                                onSelect={(client) => setClientId(client && client._id)}\n                            />\n                        </>\n                    )\n                }})}\n\n                <Grid container>\n                    <Grid item flex={1}>\n                        <FormLabel sx={{ color: '#000', fontWeight: 'bold' }}>Salary range</FormLabel>\n                    </Grid>\n                    <Grid item flex={4}>\n                        <FormControl>\n                            <label>Minimum</label>\n                            <TextField value={minSalary} type='number' onChange={(e) => setMinSalary(e.target.value)} />\n                        </FormControl>\n\n                        {'  '}\n\n                        <FormControl>\n                            <label>Maximum</label>\n                            <TextField value={maxSalary} type='number' onChange={(e) => setMaxSalary(e.target.value)} />\n                        </FormControl>\n                    </Grid>\n                </Grid>\n\n                <br /><br />\n\n                <FormControl fullWidth>\n                    <h3>Description</h3>\n                    <Editor style={{ height: '300px' }} value={description} onChange={(value) => setDescription(value)} />\n                </FormControl>\n\n                <br />\n                <br />\n                <br />\n\n                <FormControl fullWidth>\n                    <h3>Notes</h3>\n                    <Editor style={{ height: '300px' }} value={notes} onChange={(value) => setNotes(value)} />\n                </FormControl>\n\n                <br />\n                <br />\n                <br />\n            </DialogContent>\n        </Dialog>\n    );\n};\n\nexport default JobForm;\n","import React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { Dialog, DialogTitle, DialogContent, Box, Tabs, Tab, CircularProgress, Divider, IconButton } from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { sendApiRequest } from '../lib/api/public';\nimport Feed from './jobDetail/Feed';\nimport PrimaryInfo from './jobDetail/PrimaryInfo';\nimport Notes from './jobDetail/Notes';\nimport Description from './jobDetail/Description';\nimport Candidates from './jobDetail/Candidates';\nimport SendEmail from './SendEmail';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction CustomTabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nfunction a11yProps(index: number) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst JobPreview = ({ onClose }: { onClose: () => void }) => {\n  const router = useRouter();\n  const { jobId } = router.query;\n\n  const [isLoading, setLoading] = useState(false);\n  const [feedUpdateHash, setFeedUpdateHash] = useState('');\n\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (_event: React.SyntheticEvent, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const [job, setJob] = useState<any>();\n\n  const getJob = () => {\n    if (router.isReady) {\n      const { query } = router;\n\n      setLoading(true);\n\n      sendApiRequest({\n        path: `/jobs/detail?_id=${query.jobId}`,\n        method: 'GET',\n      }).then((response: any) => {\n        setLoading(false);\n\n        if (!response.error) {\n          setJob(response);\n        }\n      })\n    }\n  }\n\n  useEffect(() => {\n    getJob();\n  }, [jobId])\n\n  if (!job) {\n    return null;\n  }\n\n  return (\n    <Dialog\n      open={true}\n      fullScreen\n      maxWidth=\"lg\"\n      style={{ width: '45%', left: 'inherit' }}\n      onClose={onClose}\n      slotProps={{\n        backdrop: {\n        sx: { display: 'none' },\n      },\n    }}\n    PaperProps={{\n      sx: {\n        pointerEvents: 'auto',\n      },\n    }}\n    >\n      <DialogTitle sx={{ display: 'flex', alignItems: 'center' }}>\n          <span style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n            {job.title}\n          </span>\n\n          <IconButton onClick={onClose} sx={{ marginLeft: 'auto' }}>\n              <CloseIcon />\n          </IconButton>\n       </DialogTitle>\n\n      <DialogContent>\n        { isLoading ? <CircularProgress /> : null}\n\n        <Box sx={{ width: '100%' }}>\n          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n            <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\">\n              <Tab label=\"Details\" {...a11yProps(0)} />\n              <Tab label=\"Pipeline\" {...a11yProps(1)} />\n              <Tab label=\"Description\" {...a11yProps(2)} />\n              <Tab label=\"Notes\" {...a11yProps(3)} />\n              <Tab label=\"Feed\" {...a11yProps(4)} />\n              <Tab label=\"Email\" {...a11yProps(5)} />\n            </Tabs>\n          </Box>\n          <CustomTabPanel value={value} index={0}>\n            <PrimaryInfo job={job} onChange={() => {\n              getJob();\n            }} />\n\n            <Divider />\n\n            <Notes job={job} onChange={() => {\n              getJob();\n            }} />\n\n          </CustomTabPanel>\n\n          <CustomTabPanel value={value} index={1}>\n            <Candidates job={job} onChange={() => {\n                  setFeedUpdateHash(Math.random().toString())\n            }} />\n          </CustomTabPanel>\n\n          <CustomTabPanel value={value} index={2}>\n            <Description showTitle={false} job={job} onChange={() => {\n              getJob();\n            }} />\n          </CustomTabPanel>\n\n          <CustomTabPanel value={value} index={3}>\n            <Notes showTitle={false} job={job} onChange={() => {\n              getJob();\n            }} />\n          </CustomTabPanel>\n\n          <CustomTabPanel value={value} index={4}>\n            <Feed jobId={jobId as string} updateHash={feedUpdateHash} />\n          </CustomTabPanel>\n\n          <CustomTabPanel value={value} index={5}>\n            <SendEmail\n              jobId={jobId as string}\n            />\n          </CustomTabPanel>\n        </Box>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default JobPreview;\n","import React, { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport AuthLayout from '../components/AuthLayout';\nimport {\n  Button,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  Box,\n  Alert,\n  DialogContentText,\n  CircularProgress\n} from '@mui/material';\nimport FindInPageIcon from '@mui/icons-material/FindInPage';\nimport LaunchIcon from '@mui/icons-material/ArrowOutward';\nimport JobForm from '../components/JobForm';\nimport useList from 'hooks/useList';\nimport { renderJobStatus, renderPagination } from '../components/utils';\nimport SearchInput from 'components/job/SearchInput';\nimport StatusFilter from 'components/job/StatusFilter';\nimport JobPreview from '../components/JobPreview';\nimport confirm from '../lib/confirm';\nimport { sendApiRequest, getUrlApp } from '../lib/api/public';\nimport notify from '../lib/notify';\n\nconst Jobs = () => {\n  const router = useRouter();\n\n  const query = router.query;\n  const search = query.search || '';\n  const status = query.status || '';\n\n  const { page, fetchList, totalCount, list } = useList({\n    endpoint: 'jobs/get-list/',\n    extraParams: `&status=${status}&search=${search}`\n  });\n\n  const [selectedJob, setSelectedJob] = useState<any>();\n  const [showJobForm, setShowJobForm] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [observerLink, setObserverink] = useState(null);\n  const [fetchingObserverLink, setFetchingObserverLink] = useState(false);\n  const [organizationId, setOrganizationId] = useState(null);\n\n  const getOrgPublicUrl = (orgId) => {\n    return `${getUrlApp()}/${orgId}/`;\n  }\n\n  const previewJob = (job) => {\n    router.push({\n      pathname: router.pathname,\n      query: { ...query, preview: true, jobId: job._id },\n    });\n  }\n\n  const removeJob = async (jobId) => {\n    setIsDeleting(true);\n\n    try {\n      await sendApiRequest({\n        path: '/jobs/manage',\n        method: 'POST',\n        data: {\n          action: 'delete',\n          _id: jobId,\n        }\n      });\n\n      setIsDeleting(false);\n\n      fetchList();\n    } catch (error) {\n      setIsDeleting(false);\n      notify(error.message);\n    }\n  };\n\n  const generateObserverLink = async (jobId) => {\n    try {\n      setFetchingObserverLink(true);\n\n      const response = await sendApiRequest({\n        path: '/jobs/get-observer-link',\n        method: 'POST',\n        data: {\n          _id: jobId,\n        }\n      });\n\n      setFetchingObserverLink(false);\n      setObserverink(response.observerLink);\n      setOrganizationId(response.organizationId);\n    } catch (error) {\n      setFetchingObserverLink(false);\n      notify(error.message);\n    }\n  }\n\n  useEffect(() => {\n    fetchList();\n  }, [status, search])\n\n  const renderJobForm = () => {\n    if (!showJobForm) {\n      return null;\n    }\n\n    return (\n      <JobForm\n        open={showJobForm}\n        job={selectedJob}\n        onClose={() => setShowJobForm(false)}\n        onSuccess={() => { setShowJobForm(false); fetchList(); }}\n      />\n    )\n  }\n\n  const renderPreview = () => {\n    if (!query.preview) {\n      return null;\n    }\n\n    return (\n      <JobPreview onClose={() => {\n        router.push({\n          pathname: router.pathname,\n          query: { ...query, preview: null, jobId: null },\n        });\n      }} />\n    )\n  }\n\n  const renderObserverink = () => {\n    if (fetchingObserverLink) {\n      return (\n        <Dialog open={true} onClose={() => { setObserverink(null) }}>\n          <DialogTitle>Observer link</DialogTitle>\n\n          <DialogContent>\n            <CircularProgress />\n          </DialogContent>\n        </Dialog>\n      );\n    }\n\n    if (!observerLink || !organizationId) {\n      return null;\n    }\n\n    const link = `${getOrgPublicUrl(organizationId)}jobs/observe/${observerLink}`;\n\n    return (\n      <Dialog open={true} onClose={() => { setObserverink(null) }}>\n        <DialogTitle>Observer link</DialogTitle>\n\n        <DialogContent>\n          <Box>\n            <Alert severity='info'>\n              Please share this link with your client, so they can view the job details and the list of candidates.\n            </Alert>\n\n            <br />\n\n            <DialogContentText>\n              <Link\n                href={link}\n                target='_blank'\n                style={{ wordBreak: 'break-all' }}\n              >\n                {link}\n              </Link>\n            </DialogContentText>\n          </Box>  \n        </DialogContent>\n      </Dialog>\n    )\n  } \n\n  return (\n    <>\n      <div\n        style={{\n          float: 'right',\n          display: 'flex',\n        }}\n      >\n        <SearchInput />\n\n        <StatusFilter />\n\n        <Button\n          onClick={() => { setSelectedJob(null); setShowJobForm(true) }}\n          variant=\"contained\"\n          sx={{ marginLeft: '5px' }}\n        >\n          + Job\n        </Button>\n      </div>\n\n      <div style={{ clear: 'both', marginBottom: '10px' }} />\n\n      {renderPreview()}\n      {renderJobForm()}\n      {renderObserverink()}\n\n      <TableContainer component={Paper}>\n        <Table size='small'>\n          <TableHead>\n            <TableRow>\n              <TableCell>#</TableCell>\n              <TableCell></TableCell>\n              <TableCell>Title</TableCell>\n              <TableCell>Location</TableCell>\n              <TableCell>Client</TableCell>\n              <TableCell>Updated</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {list.map((job, index) => (\n              <TableRow\n                key={job._id}\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n              >\n                <TableCell>{index + 1}</TableCell>\n                <TableCell>\n                  <FindInPageIcon\n                    color=\"action\"\n                    sx={{ cursor: 'pointer' }}\n                    onClick={() => { previewJob(job); }}\n                  />\n\n                  <LaunchIcon\n                    color=\"action\"\n                    sx={{ cursor: 'pointer' }}\n                    onClick={() => {\n                      window.open(`${getOrgPublicUrl(job.organizationId)}carreers/jobs/${job._id}`, '_blank');\n                    }}\n                  />\n                </TableCell>\n                <TableCell>\n                  <Link href={`/job?id=${job._id}`}>{job.title}</Link>\n                </TableCell>\n                <TableCell>{job.location}</TableCell>\n                <TableCell>{job.clientName}</TableCell>\n                <TableCell>{job.updatedAt ? moment(job.createdAt).format('MM/DD/YYYY') : null}</TableCell>\n                <TableCell>\n                  {renderJobStatus(job)}\n                </TableCell>\n                <TableCell align='right'>\n                    <Button\n                      variant='contained'\n                      size=\"small\"\n                      color=\"inherit\"\n                      onClick={() => {\n                        const es = job.estimatedSalary || {};\n                        const { minValue, maxValue } = es;\n\n                        setSelectedJob({\n                          ...job,\n                          minSalary: minValue,\n                          maxSalary: maxValue\n                        });\n                        setShowJobForm(true)\n                      }}>\n                      Edit\n                    </Button>\n\n                    {' '}\n\n                    <Button\n                      variant='contained'\n                      size=\"small\"\n                      color=\"error\"\n                      onClick={() => {\n                        confirm({\n                          title: 'Confirmation',\n                          message: 'Are you sure to delete ?',\n                          onAnswer: (answer) => {\n                            if (answer) {\n                              removeJob(job._id);\n                            }\n                          }\n                        })\n                      }}\n                    >\n                      Delete\n                    </Button> \n\n                    {' '}\n\n                    <Button\n                      variant='contained'\n                      size=\"small\"\n                      color=\"info\"\n                      onClick={() => {\n                        generateObserverLink(job._id);\n                      }}\n                    >\n                      Observer link\n                    </Button> \n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      <div className='clear' />\n\n      {renderPagination({\n        router,\n        totalCount,\n        page,\n        extraQueryParams: {\n          search,\n          status\n        }\n      })}\n    </>\n  );\n};\n\nconst JobsPage = () => {\n  return (\n    <AuthLayout title={'Jobs'}>\n      <Jobs />\n    </AuthLayout>\n  );\n};\n\nexport default JobsPage;\n"],"names":["__webpack_exports__","Z","onChange","param","router","useRouter","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Select","value","event","target","push","concat","defaultValue","undefined","query","status","placeholder","sx","width","padding","jsx","MenuItem","components_JobForm","open","onClose","onSuccess","job","jobO","title","setTitle","useState","setStatus","description","setDescription","notes","setNotes","locationType","setLocationType","location","setLocation","recruiterId","setRecruiterId","clientId","setClientId","users","setUsers","minSalary","setMinSalary","maxSalary","setMaxSalary","saving","setSaving","fetchUsers","sendApiRequest","path","method","useEffect","onSave","notify","data","_id","error","jsx_runtime","Dialog","aria-labelledby","fullScreen","style","left","DialogTitle","id","Box","display","alignItems","flexGrow","IconButton","onClick","CloseIcon","Button","variant","color","disabled","DialogContent","backgroundColor","br","renderField","label","required","renderControl","TextField","e","fullWidth","RadioGroup","row","name","FormControlLabel","control","Radio","labelId","map","user","email","Fragment","span","clientName","ClientsAutoComplete","onSelect","client","Grid","container","item","flex","FormLabel","fontWeight","FormControl","type","h3","Editor","height","CustomTabPanel","props","children","index","other","div","role","hidden","p","a11yProps","components_JobPreview","jobId","isLoading","setLoading","feedUpdateHash","setFeedUpdateHash","setValue","React","setJob","getJob","isReady","then","response","maxWidth","slotProps","backdrop","PaperProps","pointerEvents","overflow","textOverflow","whiteSpace","marginLeft","CircularProgress","borderBottom","borderColor","Tabs","_event","newValue","aria-label","Tab","PrimaryInfo","Divider","Notes","Candidates","Math","random","toString","Description","showTitle","Feed","updateHash","SendEmail","Jobs","search","page","fetchList","totalCount","list","useList","endpoint","extraParams","selectedJob","setSelectedJob","showJobForm","setShowJobForm","isDeleting","setIsDeleting","observerLink","setObserverink","fetchingObserverLink","setFetchingObserverLink","organizationId","setOrganizationId","getOrgPublicUrl","orgId","getUrlApp","previewJob","pathname","preview","removeJob","action","message","generateObserverLink","float","SearchInput","StatusFilter","clear","marginBottom","JobPreview","JobForm","renderObserverink","link","Alert","severity","DialogContentText","Link","href","wordBreak","TableContainer","component","Paper","Table","size","TableHead","TableRow","TableCell","TableBody","border","FindInPageIcon","cursor","LaunchIcon","window","updatedAt","moment","createdAt","format","renderJobStatus","align","minValue","maxValue","estimatedSalary","confirm","onAnswer","answer","className","renderPagination","extraQueryParams","jobs","AuthLayout"],"sourceRoot":""}