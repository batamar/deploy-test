{"version":3,"file":"static/chunks/pages/pcandidates-8368522925f1a0b1.js","mappings":"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","sources":["webpack://_N_E/?95e2","webpack://_N_E/./components/CandidateForm.tsx","webpack://_N_E/./components/CandidatePreview.tsx","webpack://_N_E/./components/job/JobDescriptionSearch.tsx","webpack://_N_E/./pages/pcandidates.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/pcandidates\",\n      function () {\n        return require(\"private-next-pages/pcandidates.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/pcandidates\"])\n      });\n    }\n  ","import React, { useState } from 'react';\n\nimport {\n    Box,\n    Button,\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    FormControl,\n    FormLabel,\n    Grid,\n    IconButton,\n    TextField,\n    CircularProgress,\n    Typography\n} from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\nimport notify from 'lib/notify';\nimport { sendApiRequest } from 'lib/api/public';\nimport Editor from './common/Editor';\nimport Uploader from './common/Uploader';\nimport EmailsManager from './candidateDetail/EmailsManager';\nimport PhonesManager from './candidateDetail/PhonesManager';\nimport { renderField } from './utils';\n\ntype File = {\n    name: string;\n    url: string;\n    date: Date;\n}\n\ntype Candidate = {\n    _id?: string;\n    firstName?: string;\n    lastName: string;\n    emails?: {\n        type: string;\n        email: string;\n    }[];\n    phones?: {\n        type: string;\n        phone: string;\n    }[];\n    currentCompany: string;\n    linkedinUrl?: string;\n    githubUrl?: string;\n    googleScholarUrl: string;\n    websiteUrl: string;\n    city: string;\n    state: string;\n    notes: string;\n    resumes: File[];\n    attachments: File[];\n}\n\ntype Props = {\n    onClose: () => void;\n    onSuccess: () => void;\n    open: boolean;\n    candiate?: Candidate\n};\n\nconst CandidateForm = ({ open, onClose, onSuccess, candiate }: Props) => {\n    const candiateO = candiate || {} as Candidate;\n\n    const [firstName, setFirstName] = useState(candiateO.firstName);\n    const [lastName, setLastName] = useState(candiateO.lastName);\n    const [emails, setEmails] = useState(candiateO.emails);\n    const [notes, setNotes] = useState(candiateO.notes);\n    const [phones, setPhones] = useState(candiateO.phones);\n    const [currentCompany, setCurrentCompany] = useState(candiateO.currentCompany);\n    const [linkedinUrl, setLinkedinUrl] = useState(candiateO.linkedinUrl);\n    const [githubUrl, setGithubUrl] = useState(candiateO.githubUrl);\n    const [googleScholarUrl, setGoogleScholarUrl] = useState(candiateO.googleScholarUrl);\n    const [websiteUrl, setWebsiteUrl] = useState(candiateO.websiteUrl);\n\n    const [state, setState] = useState(candiateO.state);\n    const [city, setCity] = useState(candiateO.city);\n\n    const [resumes, setResumes] = useState(candiateO.resumes);\n    const [attachments, setAttachments] = useState(candiateO.attachments || []);\n    const [saving, setSaving] = useState(false);\n    const [parsingCV, setParsingCV] = useState(false);\n\n    const onSave = async () => {\n        if (!firstName || !lastName) {\n            notify('Please fill the required fields');\n            return;\n        }\n\n        setSaving(true);\n\n        try {\n            await sendApiRequest({\n                path: '/candidates/manage',\n                method: 'POST',\n                data: {\n                    _id: candiateO._id,\n                    firstName,\n                    lastName,\n                    emails,\n                    phones,\n                    currentCompany,\n                    linkedinUrl,\n                    githubUrl,\n                    googleScholarUrl,\n                    websiteUrl,\n                    state,\n                    city,\n                    notes,\n                    resumes,\n                    attachments\n                }\n            });\n\n            onSuccess();\n\n            setSaving(false);\n        } catch (error) {\n            notify(error);\n        }\n\n    };\n\n    const parseCV = async (url) => {\n        setParsingCV(true);\n\n        try {\n            const response = await sendApiRequest({\n                path: '/candidates/parse-cv',\n                method: 'POST',\n                data: {\n                    url\n                }\n            });\n\n            const states = [\n                { name: 'firstName', func: setFirstName },\n                { name: 'lastName', func: setLastName },\n                { name: 'emails', func: setEmails },\n                { name: 'phones', func: setPhones },\n                { name: 'linkedinUrl', func: setLinkedinUrl },\n                { name: 'githubUrl', func: setGithubUrl },\n                { name: 'googleScholarUrl', func: setGoogleScholarUrl },\n                { name: 'websiteUrl', func: setWebsiteUrl },\n            ]\n\n            for (const state of states) {\n                let value = response[state.name];\n\n                if (value) {\n                    state.func(value);\n                }\n            }\n\n            setParsingCV(false);\n        } catch (error) {\n            notify(error);\n        }\n    };\n\n    const renderFields = () => {\n        if (parsingCV) {\n            return (\n                <>\n                    <CircularProgress />\n                    <Typography>Parsing CV...</Typography>\n                </>\n            );\n        }\n\n        return (\n            <>\n                {renderField({ label: 'First Name', required: true, renderControl: () =>\n                    <TextField defaultValue={firstName} onChange={(e) => setFirstName(e.target.value)} fullWidth />\n                })}\n\n                {renderField({ label: 'Last Name', required: true, renderControl: () =>\n                    <TextField defaultValue={lastName} onChange={(e) => setLastName(e.target.value)} fullWidth />\n                })}\n\n                {renderField({ label: 'Emails', renderControl: () =>\n                    <EmailsManager initialEmails={emails} onChange={setEmails} />\n                })}\n\n                {renderField({ label: 'Phones', renderControl: () =>\n                    <PhonesManager initialPhones={phones} onChange={setPhones} />\n                })}\n\n                <Grid container>\n                    <Grid item flex={1}>\n                        <FormLabel sx={{ color: '#000', fontWeight: 'bold' }}>Social links</FormLabel>\n                    </Grid>\n                    <Grid item flex={4}>\n                        <TextField\n                            fullWidth\n                            label=\"LinkedIn\"\n                            defaultValue={linkedinUrl}\n                            onChange={(e) => {\n                                setLinkedinUrl(e.target.value);\n                            }}\n                        /> <br /><br />\n\n                        <TextField\n                            fullWidth\n                            label=\"Github\"\n                            defaultValue={githubUrl}\n                            onChange={(e) => {\n                                setGithubUrl(e.target.value);\n                            }}\n                        /> <br /><br />\n\n                        <TextField\n                            fullWidth\n                            label=\"Google Scholar\"\n                            defaultValue={googleScholarUrl}\n                            onChange={(e) => {\n                                setGoogleScholarUrl(e.target.value);\n                            }}\n                        /> <br /><br />\n\n                        <TextField\n                            fullWidth\n                            label=\"Website\"\n                            defaultValue={websiteUrl}\n                            onChange={(e) => {\n                                setWebsiteUrl(e.target.value);\n                            }}\n                        /> <br /><br />\n                    </Grid>\n                </Grid>\n\n                <br />\n\n                <Grid container>\n                    <Grid item flex={1}>\n                        <FormLabel sx={{ color: '#000', fontWeight: 'bold' }}>Address</FormLabel>\n                    </Grid>\n                    <Grid item flex={4}>\n                        <TextField\n                            fullWidth\n                            label=\"City\"\n                            defaultValue={city}\n                            onChange={(e) => {\n                                setCity(e.target.value);\n                            }}\n                        /> <br /><br />\n\n                        <TextField\n                            fullWidth\n                            label=\"State\"\n                            defaultValue={state}\n                            onChange={(e) => {\n                                setState(e.target.value);\n                            }}\n                        /> <br /><br />\n                    </Grid>\n                </Grid>\n\n                <br />\n\n                {renderField({ label: 'Current employer', renderControl: () =>\n                    <TextField defaultValue={currentCompany} onChange={(e) => setCurrentCompany(e.target.value)} fullWidth />\n                })}\n\n                <FormControl fullWidth>\n                    <h3>Notes</h3>\n                    <Editor style={{ height: '300px' }} value={notes} onChange={(value) => setNotes(value)} />\n                </FormControl>\n\n                <br /><br /><br /><br /><br />\n\n                {renderField({ label: 'Attachments', renderControl: () => {\n                    return (\n                        <Uploader\n                            label=\"Upload files\"\n                            defaultFiles={attachments}\n                            onChange={(results) => {\n                                setAttachments(results);\n                            }}\n                        />\n                    )\n                }})}\n            </>\n        )\n    }\n\n    return (\n        <Dialog onClose={onClose} aria-labelledby=\"modal-title\" open={open} fullScreen style={{ width: '50%', left: 'inherit' }}>\n            <DialogTitle id=\"modal-title\">\n                <Box display=\"flex\" alignItems=\"center\">\n                    <Box flexGrow={1} >{candiateO._id ? 'Edit candiate' : 'Add candiate'}</Box>\n                    <Box>\n                        <IconButton onClick={onClose}>\n                            <CloseIcon />\n                        </IconButton>\n\n                        <Button variant=\"contained\" color=\"success\" onClick={onSave} disabled={saving}>\n                            Save\n                        </Button>\n                    </Box>\n                </Box>\n            </DialogTitle>\n\n            <DialogContent style={{ backgroundColor: '#f8f8f8' }}>\n                <br />\n\n                {renderField({ label: 'Resumes', renderControl: () => {\n                    return (\n                        <Uploader\n                            label=\"Upload\"\n                            multiple\n                            defaultFiles={resumes || []}\n                            onChange={(results) => {\n                                setResumes(results);\n\n                                if (!firstName && !lastName && results.length > 0) {\n                                    parseCV(results[0].url);\n                                }\n                            }}\n                        />\n                    )\n                }})}\n\n                {renderFields()}\n\n            </DialogContent>\n        </Dialog>\n    );\n};\n\nexport default CandidateForm;\n","import React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { Dialog, DialogTitle, DialogContent, Box, Tabs, Tab, CircularProgress, Divider, IconButton } from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { sendApiRequest } from '../lib/api/public';\nimport Feed from './candidateDetail/Feed';\nimport Jobs from './candidateDetail/Jobs';\nimport PrimaryInfo from './candidateDetail/PrimaryInfo';\nimport Notes from './candidateDetail/Notes';\nimport { readFile } from '../lib/api/public';\nimport Attachments from './candidateDetail/Attachments';\nimport SendEmail from './SendEmail';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction CustomTabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nfunction a11yProps(index: number) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst CandidatePreview = ({ onClose }: { onClose: () => void }) => {\n  const router = useRouter();\n  const { candidateId } = router.query;\n\n  const [isLoading, setLoading] = useState(false);\n  const [feedUpdateHash, setFeedUpdateHash] = useState('');\n\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (_event: React.SyntheticEvent, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const [candidate, setCandidate] = useState<any>();\n\n  const getCandidate = () => {\n    if (router.isReady) {\n      const { query } = router;\n\n      setLoading(true);\n\n      sendApiRequest({\n        path: `/candidates/detail?_id=${query.candidateId}`,\n        method: 'GET',\n      }).then((response: any) => {\n        setLoading(false);\n\n        if (!response.error) {\n          setCandidate(response);\n        }\n      })\n    }\n  }\n\n  useEffect(() => {\n    getCandidate();\n  }, [candidateId])\n\n  if (!candidate) {\n    return null;\n  }\n\n  return (\n    <Dialog\n      open={true}\n      fullScreen\n      maxWidth=\"lg\"\n      style={{ width: '50%', left: 'inherit' }}\n      onClose={onClose}\n      slotProps={{\n        backdrop: {\n          sx: { display: 'none' },\n        },\n      }}\n      PaperProps={{\n        sx: {\n          pointerEvents: 'auto',\n        },\n      }}\n    >\n      <DialogTitle sx={{ display: 'flex', alignItems: 'center' }}>\n        {candidate.avatarUrl ? <img style={{ borderRadius: '50px', height: '30px', marginRight: '10px' }} src={readFile(candidate.avatarUrl)} /> : null}\n        <span>\n          {candidate.firstName} {candidate.lastName}\n        </span>\n\n        <IconButton onClick={onClose} sx={{ marginLeft: 'auto' }}>\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n\n      <DialogContent>\n        {isLoading ? <CircularProgress /> : null}\n\n        <Box sx={{ width: '100%' }}>\n          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n            <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\">\n              <Tab label=\"Details\" {...a11yProps(0)} />\n              <Tab label=\"Attachments\" {...a11yProps(1)} />\n              <Tab label=\"Notes\" {...a11yProps(2)} />\n              <Tab label=\"Feed\" {...a11yProps(3)} />\n              <Tab label=\"Email\" {...a11yProps(4)} />\n            </Tabs>\n          </Box>\n          <CustomTabPanel value={value} index={0}>\n            <PrimaryInfo showAvatar={false} candidate={candidate} onChange={() => {\n              getCandidate();\n            }} />\n\n            <Divider />\n\n            <Jobs candidate={candidate} onChange={() => {\n              setFeedUpdateHash(Math.random().toString())\n            }} />\n          </CustomTabPanel>\n\n          <CustomTabPanel value={value} index={1} key={candidate._id}>\n            <Attachments withCombo candidate={candidate} onChange={() => {\n              getCandidate();\n            }} />\n\n\n        </CustomTabPanel>\n\n        <CustomTabPanel value={value} index={2}>\n          <Notes showTitle={false} candidate={candidate} onChange={() => {\n            getCandidate();\n          }} />\n        </CustomTabPanel>\n\n        <CustomTabPanel value={value} index={3}>\n          <Feed candidateId={candidateId as string} updateHash={feedUpdateHash} />\n        </CustomTabPanel>\n\n        <CustomTabPanel value={value} index={4}>\n          <SendEmail\n            jobId={(candidate.jobIds || []).length > 0 ? candidate.jobIds[0] : undefined}\n            candidateId={candidate._id}\n            to={(candidate.emails || []).map((email) => email.email).join(',')}\n          />\n        </CustomTabPanel>\n      </Box>\n    </DialogContent>\n    </Dialog >\n  );\n};\n\nexport default CandidatePreview;\n","import React from 'react';\nimport { sendApiRequest } from '../../lib/api/public';\nimport notify from '../../lib/notify';\nimport JobsAutoComplete from './JobSearch';\n\ntype Props = {\n  onChange: (list: any[], totalCount: number) => void;\n  onClear: () => void;\n  textFieldStyle?: React.CSSProperties;\n  inputPropStyle?: React.CSSProperties\n}\n\nconst JobDescriptionSearch = ({ onChange, onClear, textFieldStyle, inputPropStyle }: Props) => {\n  const searchBySemanticSearch = (_id: string) => {\n      sendApiRequest({\n          path: '/candidates/semantic-search',\n          method: 'POST',\n          data: {\n            _id,\n          }\n      }).then((response: any) => {\n          if (!response.error) {\n            onChange(response.list, response.totalCount);\n          }\n      }).catch((error) => {\n        notify(error.message);\n      });\n  }\n\n  return (\n    <JobsAutoComplete textFieldStyle={textFieldStyle} inputPropStyle={inputPropStyle} label=\"Job description search\" onSelect={(job) => {\n        if (!job) {\n          onClear();\n        } else {\n          searchBySemanticSearch(job._id);\n        }\n    }} />\n  );\n};\n\nexport default JobDescriptionSearch;\n","import Link from 'next/link';\nimport moment from 'moment';\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport AuthLayout from '../components/AuthLayout';\nimport { Button, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\nimport FindInPageIcon from '@mui/icons-material/FindInPage';\nimport CandidateForm from '../components/CandidateForm';\nimport notify from '../lib/notify';\nimport SearchInput from 'components/job/SearchInput';\nimport useList from 'hooks/useList';\nimport { renderPagination } from 'components/utils';\nimport confirm from '../lib/confirm';\nimport { sendApiRequest } from '../lib/api/public';\nimport CandidateStatusChanger from 'components/common/CandidateStatusChanger';\nimport CandidatePreview from 'components/CandidatePreview';\nimport JobDescriptionSearch from 'components/job/JobDescriptionSearch';\n\nconst Candidates = () => {\n  const router = useRouter();\n  const query = router.query;\n  const search = query.search || '';\n\n  const { page, fetchList, isLoading, totalCount, list, setList, setTotalCount } = useList({\n    endpoint: 'candidates/',\n    extraParams: `&search=${search}`,\n    useEffectParams: [search]\n  });\n\n  const previewCandidate = (candidate) => {\n    router.push({\n      pathname: router.pathname,\n      query: { ...query, preview: true, candidateId: candidate._id },\n    });\n  }\n\n  const [selectedCandidate, setSelectedCandidate] = useState();\n  const [showForm, setShowForm] = useState(false);\n\n  const renderPreview = () => {\n    if (!query.preview) {\n      return null;\n    }\n\n    return (\n      <CandidatePreview onClose={() => {\n        router.push({\n          pathname: router.pathname,\n          query: { ...query, preview: null, candidateId: null },\n        });\n      }} />\n    )\n  }\n\n  const renderForm = () => {\n    if (!showForm) {\n      return null;\n    }\n\n    return (\n      <CandidateForm\n        open={showForm}\n        candiate={selectedCandidate}\n        onClose={() => setShowForm(false)}\n        onSuccess={() => { setShowForm(false); fetchList(); }}\n      />\n    )\n  }\n\n  const removeCandidate = async (candidateId: string) => {\n    try {\n      await sendApiRequest({\n        path: '/candidates/manage',\n        method: 'POST',\n        data: {\n          action: 'delete',\n          _id: candidateId,\n        }\n      });\n\n      notify('Candidate deleted successfully');\n\n      fetchList();\n    } catch (error) {\n      notify(error);\n    }\n  };\n\n  return (\n    <AuthLayout title='Candidates' isLoading={isLoading}>\n      <SearchInput />\n\n      {renderPreview()}\n\n      <div\n        style={{\n          float: 'right',\n          display: 'flex',\n          alignItems: 'center'\n        }}\n      >\n        <JobDescriptionSearch\n          textFieldStyle={{\n            width: '500px',\n            marginRight: '10px',\n          }}\n          inputPropStyle={{\n            paddingTop: '0px',\n            paddingBottom: '0px',\n          }}\n          onChange={(list, totalCount) => {\n            setList(list);\n            setTotalCount(totalCount);\n          }}\n          onClear={() => {\n            fetchList();\n          }}\n        />\n\n        <Button\n          onClick={() => { setSelectedCandidate(null); setShowForm(true) }}\n          variant=\"contained\"\n        >\n          + Candidate\n        </Button>\n      </div>\n\n      {renderForm()}\n      \n      <div style={{ clear: 'both', marginBottom: '10px' }} />\n\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 650 }} size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell>#</TableCell>\n              <TableCell></TableCell>\n              <TableCell>Name</TableCell>\n              <TableCell>Location</TableCell>\n              <TableCell>Updated</TableCell>\n              <TableCell>Recent status-Extended</TableCell>\n              <TableCell>Score</TableCell>\n              <TableCell></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {list.map((candiate, index) => (\n              <TableRow\n                key={candiate._id}\n              >\n                <TableCell>{index + 1}</TableCell>\n                <TableCell>\n                  <FindInPageIcon\n                    color=\"action\"\n                    sx={{ cursor: 'pointer' }}\n                    onClick={() => { previewCandidate(candiate); }}\n                  />\n\n                </TableCell>\n                <TableCell>\n                  <Link href={`/candidate?id=${candiate._id}`}>\n                    {candiate.firstName} {candiate.lastName}\n                  </Link>\n                </TableCell>\n                <TableCell>{candiate.city && candiate.state ? `${candiate.city}, ${candiate.state}` : null}</TableCell>\n                <TableCell>{candiate.updatedAt ? moment(candiate.createdAt).format('MM/DD/YYYY') : null}</TableCell>\n                <TableCell>\n                  {\n                    candiate.recentStatus ?\n                    <>\n                      <CandidateStatusChanger\n                        status={{\n                          _id: candiate.recentStatus.data.statusId,\n                          name: candiate.recentStatus.data.statusName,\n                          color: candiate.recentStatus.data.statusColor\n                        }}\n                        candidateId={candiate._id}\n                        jobId={candiate.recentStatus.jobId}\n                        onSuccess={() => {\n                          fetchList();\n                        }}\n                      />\n                      \n                      {' - '}\n\n                      <Link href={`job?id=${candiate.recentStatus.jobId}`} target='__blank'>{candiate.recentStatus.jobTitle}</Link>\n                    </>\n                    : null\n                  }\n                </TableCell>\n                <TableCell>{candiate.score}</TableCell>\n\n                <TableCell align='right'>\n                    <Button\n                      variant='contained'\n                      size=\"small\"\n                      color=\"inherit\"\n                      onClick={() => {\n                        setSelectedCandidate(candiate);\n                        setShowForm(true)\n                      }}>\n                      Edit\n                    </Button>\n\n                    {' '}\n\n                    <Button variant='contained' size=\"small\" color=\"error\" onClick={() => {\n                        confirm({\n                          title: 'Confirmation',\n                          message: 'Are you sure to delete ?',\n                          onAnswer: (answer) => {\n                            if (answer) {\n                              removeCandidate(candiate._id);\n                            }\n                          }\n                        })\n                    }}>Delete</Button>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {renderPagination({\n        router,\n        totalCount,\n        page,\n        extraQueryParams: {\n          search,\n        }\n      })}\n    </AuthLayout>\n  );\n};\n\nexport default Candidates;\n"],"names":["window","__NEXT_P","push","__webpack_require__","components_CandidateForm","open","onClose","onSuccess","candiate","param","candiateO","firstName","setFirstName","useState","lastName","setLastName","emails","setEmails","notes","setNotes","phones","setPhones","currentCompany","setCurrentCompany","linkedinUrl","setLinkedinUrl","githubUrl","setGithubUrl","googleScholarUrl","setGoogleScholarUrl","websiteUrl","setWebsiteUrl","state","setState","city","setCity","resumes","setResumes","attachments","setAttachments","saving","setSaving","parsingCV","setParsingCV","onSave","notify","sendApiRequest","path","method","data","_id","error","parseCV","url","response","name","func","value","jsx_runtime","jsxs","Dialog","aria-labelledby","fullScreen","style","width","left","jsx","DialogTitle","id","Box","display","alignItems","flexGrow","IconButton","onClick","CloseIcon","Button","variant","color","disabled","DialogContent","backgroundColor","br","renderField","label","renderControl","Uploader","multiple","defaultFiles","onChange","results","length","Fragment","CircularProgress","Typography","required","TextField","defaultValue","e","target","fullWidth","EmailsManager","initialEmails","PhonesManager","initialPhones","Grid","container","item","flex","FormLabel","sx","fontWeight","FormControl","h3","Editor","height","CustomTabPanel","props","children","index","other","div","role","hidden","concat","p","a11yProps","components_CandidatePreview","router","useRouter","candidateId","query","isLoading","setLoading","feedUpdateHash","setFeedUpdateHash","setValue","React","candidate","setCandidate","getCandidate","isReady","then","useEffect","maxWidth","slotProps","backdrop","PaperProps","pointerEvents","avatarUrl","img","borderRadius","marginRight","src","readFile","span","marginLeft","borderBottom","borderColor","Tabs","_event","newValue","aria-label","Tab","PrimaryInfo","showAvatar","Divider","Jobs","Math","random","toString","Attachments","withCombo","Notes","showTitle","Feed","updateHash","SendEmail","jobId","jobIds","undefined","to","map","email","join","job_JobDescriptionSearch","onClear","textFieldStyle","inputPropStyle","searchBySemanticSearch","list","totalCount","catch","message","JobsAutoComplete","onSelect","job","pcandidates","search","page","fetchList","setList","setTotalCount","useList","endpoint","extraParams","useEffectParams","previewCandidate","pathname","preview","selectedCandidate","setSelectedCandidate","showForm","setShowForm","removeCandidate","action","AuthLayout","title","SearchInput","CandidatePreview","float","JobDescriptionSearch","paddingTop","paddingBottom","CandidateForm","clear","marginBottom","TableContainer","component","Paper","Table","minWidth","size","TableHead","TableRow","TableCell","TableBody","FindInPageIcon","cursor","Link","href","updatedAt","moment","createdAt","format","recentStatus","CandidateStatusChanger","status","statusId","statusName","statusColor","jobTitle","score","align","confirm","onAnswer","answer","renderPagination","extraQueryParams"],"sourceRoot":""}