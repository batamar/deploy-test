{"version":3,"file":"static/chunks/pages/ai-editor-4ee07fd25cc143c1.js","mappings":"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","sources":["webpack://_N_E/?6023","webpack://_N_E/./pages/ai-editor.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/ai-editor\",\n      function () {\n        return require(\"private-next-pages/ai-editor.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/ai-editor\"])\n      });\n    }\n  ","import 'remirror/styles/all.css';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport {\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    Button,\n    Select,\n    MenuItem,\n    FormControl,\n    InputLabel,\n    LinearProgress,\n    Grid,\n    Box,\n} from '@mui/material';\nimport AutoFixHighIcon from '@mui/icons-material/AutoAwesome';\n\nimport { BoldExtension, HeadingExtension, ItalicExtension, UnderlineExtension, ParagraphExtension } from 'remirror/extensions';\nimport { MarkExtension, ApplySchemaAttributes, MarkSpecOverride, MarkExtensionSpec, prosemirrorNodeToHtml } from 'remirror';\nimport { TextSelection } from 'prosemirror-state';\nimport { DOMParser as ProsemirrorDOMParser } from 'prosemirror-model';\n\nimport { sendApiRequest } from '../lib/api/public';\n\nimport {\n    Remirror,\n    useRemirror,\n    useRemirrorContext,\n    ThemeProvider,\n    Toolbar,\n    BasicFormattingButtonGroup,\n    HeadingLevelButtonGroup,\n    HistoryButtonGroup,\n} from '@remirror/react';\n\nconst fcSx = {\n    '& .MuiSelect-select': {\n        width: '200px',\n        padding: '6px', // Adjust padding as needed\n    },\n    '& .MuiOutlinedInput-input': {\n        width: '200px',\n        padding: '6px', // Adjust padding inside the input\n    },\n}\n\nimport AuthLayout from '../components/AuthLayout';\n\nclass SpanExtension extends MarkExtension {\n    get name() {\n        return 'span';\n    }\n\n    createMarkSpec(extra: ApplySchemaAttributes, override: MarkSpecOverride): MarkExtensionSpec {\n        return {\n            ...override,\n            attrs: extra.defaults(),\n            parseDOM: [\n                {\n                    tag: 'span',\n                    getAttrs: node => ({\n                        class: node.getAttribute('class')\n                    })\n                }\n            ],\n            toDOM: mark => ['span', { class: mark.attrs.class }, 0]\n        };\n    }\n}\n\nconst UseSuggestionButton = ({ aiSuggestion, onChange }) => {\n    const { commands } = useRemirrorContext();\n\n    const useSuggestion = () => {\n        commands.insertHtml(aiSuggestion);\n\n        onChange();\n    }\n\n    return (\n        <Button variant=\"contained\" color=\"primary\" onClick={useSuggestion}>\n            Use Suggestion\n        </Button>\n    )\n}\n\nconst MyEditor = () => {\n    const [tooltip, setTooltip] = useState('');\n    const [tooltipType, setTooltipType] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [isAnalyzing, setIsAnalyzing] = useState(false);\n    const [aiSuggestion, setAISuggestion] = useState('');\n\n    const extraAttributes = {\n        class: {\n            default: '',\n            parseDOM: (dom) => dom.getAttribute(\"class\"),\n            toDOM: (node) => node.class,\n        },\n    };\n\n    const paragraphExtension = new ParagraphExtension({\n        extraAttributes\n    });\n\n    const spanExtension = new SpanExtension({\n        extraAttributes\n    });\n\n    const extensions = () => [\n        paragraphExtension,\n        spanExtension,\n        new HeadingExtension({}),\n        new BoldExtension({}),\n        new ItalicExtension({}),\n        new UnderlineExtension({}),\n    ];\n\n    const { manager, state, onChange } = useRemirror({\n        extensions,\n        content: ``,\n        selection: 'start',\n        stringHandler: 'html',\n    });\n\n    const [view, setView] = useState(null);\n\n    useEffect(() => {\n        if (manager.view) {\n            setView(manager.view);\n        }\n    }, [manager]);\n\n    const handleClick = useCallback((event) => {\n        if (event.target.className.includes('ai-')) {\n            if (!view) return;\n\n            const pos = view.posAtDOM(event.target, 0);\n            const node = view.state.doc.nodeAt(pos);\n\n            if (node) {\n                const start = pos;\n                const end = start + node.nodeSize;\n                const tr = view.state.tr.setSelection(TextSelection.create(view.state.doc, start, end));\n                view.dispatch(tr);\n            }\n\n            setTooltip(event.target.innerText);\n            setTooltipType(event.target.className);\n        }\n    }, [view]);\n\n    const deselect = useCallback((removeClass = false) => {\n        if (!view) return;\n    \n        const st = view.state;\n    \n        if (removeClass) {\n          const { from, to } = st.selection;\n          const tr = st.tr;\n    \n          let paragraphEnd = to;\n    \n          st.doc.nodesBetween(from, to, (node, pos) => {\n            if (node.type.name === 'paragraph') {\n              const newAttrs = { ...node.attrs };\n              delete newAttrs.class; // Remove the class attribute\n              tr.setNodeMarkup(pos, undefined, newAttrs);\n              paragraphEnd = pos + node.nodeSize; // Update the end position of the paragraph\n            }\n          });\n    \n          try {\n            tr.setSelection(TextSelection.create(tr.doc, paragraphEnd)); // Deselect the paragraph by moving the cursor to the end of the paragraph\n          } catch (_e) {\n            console.error(_e);\n          }\n    \n          view.dispatch(tr);\n        } else {\n          const tr = st.tr.setSelection(TextSelection.create(st.doc, 0, 0));\n          view.dispatch(tr);\n        }\n      }, [view]);\n\n    useEffect(() => {\n        const editorContainer = document.querySelector('.remirror-editor');\n\n        if (editorContainer) {\n            editorContainer.addEventListener('click', handleClick);\n        }\n\n        return () => {\n            if (editorContainer) {\n                editorContainer.removeEventListener('click', handleClick);\n            }\n        };\n    }, [view]);\n\n    const getSelectedText = () => {\n        const { from, to } = state.selection;\n\n        return state.doc.textBetween(from, to, ' ');\n    };\n\n    const saveHTML = () => {\n        const html = prosemirrorNodeToHtml(state.doc);\n        console.log(html);\n    };\n\n    const replaceContent = (html) => {\n        const state = view.state;\n        const { schema, tr } = state;\n\n        // Use the browser's DOMParser to parse HTML string into DOM nodes\n        const domParser = new DOMParser();\n        const parsedDOM = domParser.parseFromString(html, 'text/html').body;\n    \n        // Convert the DOM nodes to Prosemirror nodes\n        const prosemirrorDOMParser = ProsemirrorDOMParser.fromSchema(schema);\n        const doc = prosemirrorDOMParser.parse(parsedDOM);\n    \n        // Create a transaction to replace the content\n        const transaction = tr.replaceWith(0, state.doc.content.size, doc.content);\n\n        view.dispatch(transaction);\n    };\n\n    const analyzeContent = () => {\n        const html = prosemirrorNodeToHtml(state.doc);\n\n        setIsAnalyzing(true);\n\n        sendApiRequest({\n            path: `/ai-editor/analyze-content`,\n            method: 'POST',\n            data: {\n                content: html\n            }\n        }).then((response: any) => {\n            setIsAnalyzing(false);\n            replaceContent(response.text);\n        }).catch((_error) => {\n            setIsAnalyzing(false);\n        });\n    };\n\n    const modifyText = (tool) => {\n        setLoading(true);\n\n        sendApiRequest({\n            path: `/ai-editor/modify`,\n            method: 'POST',\n            data: {\n                tool,\n                text: getSelectedText(),\n            }\n        }).then((response: any) => {\n            setLoading(false);\n            setAISuggestion(response.text);\n        }).catch((_error) => {\n            setLoading(false);\n        });\n    }\n\n    const onSelectAITool = (event) => {\n        modifyText(event.target.value);\n    }\n\n    const renderTooltipDialog = () => {\n        if (!tooltip) {\n            return null;\n        }\n\n        let text = '';\n        let command = 'simplify-and-clarify';\n        let content = 'This sentence is too long and complex. Use shorter sentences and simpler words.';\n        let commandText = 'Simplify it for me';\n\n        if (tooltipType === 'ai-blue') {\n            text = 'Passive voice';\n            command = 'more-confident';\n            commandText = 'Make it more confident';\n        } else if (tooltipType === 'ai-red') {\n            text = 'Strengthening phrases';\n        } else if (tooltipType === 'ai-yellow') {\n            text = 'Clarifying phrases';\n        }\n\n        if (tooltipType === 'ai-blue') {\n            content = 'Use active voice. \"The cat was chased by the dog\" becomes \"The dog chased the cat.\"';\n        }\n\n        return (\n            <Dialog open onClose={() => { setTooltip(''); deselect(); }}>\n                <DialogTitle>{text}</DialogTitle>\n                <DialogContent>\n                    <p style={{ fontStyle: 'italic' }}>\n                        {content}\n                    </p>\n\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        startIcon={<AutoFixHighIcon />}\n                        onClick={() => {\n                            modifyText(command);\n                        }}\n                    >\n                        {commandText}\n                    </Button>\n                </DialogContent>\n            </Dialog>\n        )\n    }\n\n    const renderAISuggestionDialog = () => {\n        if (!aiSuggestion) {\n            return null;\n        }\n\n        const sx = { border: '1px solid #ccc', padding: '20px', borderRadius: '5px', marginBottom: '50px', backgroundColor: '#f5f5f5' }\n\n        return (\n            <Dialog open onClose={() => setAISuggestion('')}>\n                <DialogTitle>AI Suggestion</DialogTitle>\n                <DialogContent>\n                    <label>Original</label>\n\n                    <Box sx={sx}>\n                        <span style={{ backgroundColor: 'rgb(252 165 165)' }}>{getSelectedText()}</span>\n                    </Box>\n\n                    <label>AI Suggestion</label>\n\n                    <Box sx={sx}>\n                        <span style={{ backgroundColor: 'rgb(167 243 208)' }}>{aiSuggestion}</span>\n                    </Box>\n\n                    <Grid container justifyContent=\"space-between\">\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            onClick={() => {\n                                setAISuggestion('');\n                            }}\n                        >\n                            Close\n                        </Button>\n\n                        <UseSuggestionButton\n                            aiSuggestion={aiSuggestion}\n                            onChange={() => {\n                                setAISuggestion('');\n                                setTooltip('');\n                                deselect(true);\n                            }}\n                        />\n                    </Grid>\n                </DialogContent>\n            </Dialog>\n        )\n    }\n\n    return (\n        <ThemeProvider>\n            {renderTooltipDialog()}\n            <br />\n\n            {loading && <LinearProgress />}\n            {isAnalyzing && <LinearProgress />}\n\n            <Remirror\n                manager={manager}\n                autoFocus\n                onChange={onChange}\n                initialContent={state}\n                autoRender='end'\n            >\n                <Toolbar style={{ padding: '20px 10px' }}>\n                    <HistoryButtonGroup />\n                    <BasicFormattingButtonGroup />\n                    <HeadingLevelButtonGroup showAll />\n\n                    <FormControl>\n                        <InputLabel id=\"ai-tools-label\" sx={{ top: '-10px' }}>AI Tools</InputLabel>\n\n                        <Select\n                            sx={fcSx}\n                            labelId=\"ai-tools-label\"\n                            id=\"ai-tools-select\"\n                            label=\"AI Tools\"\n                            onChange={onSelectAITool}\n                            disabled={!getSelectedText()}\n                            value=\"\"\n                        >\n                            <MenuItem value=\"simplify-and-clarify\">Simplify & Clarify</MenuItem>\n                            <MenuItem value=\"shorten-it\">Shorten it</MenuItem>\n                            <MenuItem value=\"more-confident\">More Confident</MenuItem>\n                            <MenuItem value=\"more-friendly\">More Friendly</MenuItem>\n                            <MenuItem value=\"more-casual\">More Casual</MenuItem>\n                        </Select>\n                    </FormControl>\n\n                    {renderAISuggestionDialog()}\n                </Toolbar>\n            </Remirror>\n\n            <br />\n\n            <Button onClick={analyzeContent} variant=\"contained\" color=\"primary\">\n                Analyze content\n            </Button>\n        </ThemeProvider>\n    );\n};\n\nconst AiEditor = () => {\n    return (\n        <AuthLayout title=\"AI Editor\">\n            <div style={{ width: '60%' }}>\n                <MyEditor />\n            </div>\n        </AuthLayout>\n    );\n};\n\nexport default AiEditor;"],"names":["window","__NEXT_P","push","__webpack_require__","fcSx","width","padding","SpanExtension","MarkExtension","name","createMarkSpec","extra","override","attrs","defaults","parseDOM","tag","getAttrs","node","class","getAttribute","toDOM","mark","UseSuggestionButton","aiSuggestion","onChange","param","commands","useRemirrorContext","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","Button","variant","color","onClick","insertHtml","MyEditor","tooltip","setTooltip","useState","tooltipType","setTooltipType","loading","setLoading","isAnalyzing","setIsAnalyzing","setAISuggestion","extraAttributes","default","dom","paragraphExtension","ParagraphExtension","spanExtension","manager","state","useRemirror","extensions","HeadingExtension","BoldExtension","ItalicExtension","UnderlineExtension","content","selection","stringHandler","view","setView","useEffect","handleClick","useCallback","event","target","className","includes","pos","posAtDOM","doc","nodeAt","end","start","nodeSize","tr","setSelection","TextSelection","create","dispatch","innerText","deselect","removeClass","st","from","to","paragraphEnd","nodesBetween","type","newAttrs","setNodeMarkup","undefined","_e","console","error","editorContainer","document","querySelector","addEventListener","removeEventListener","getSelectedText","textBetween","replaceContent","schema","parsedDOM","domParser","DOMParser","parseFromString","html","body","prosemirrorDOMParser","ProsemirrorDOMParser","fromSchema","parse","transaction","replaceWith","size","modifyText","sendApiRequest","path","method","data","tool","text","then","response","catch","jsxs","ThemeProvider","renderTooltipDialog","command","commandText","Dialog","open","onClose","DialogTitle","DialogContent","p","style","fontStyle","startIcon","AutoFixHighIcon","br","LinearProgress","Remirror","autoFocus","initialContent","autoRender","Toolbar","HistoryButtonGroup","BasicFormattingButtonGroup","HeadingLevelButtonGroup","showAll","FormControl","InputLabel","id","sx","top","Select","labelId","label","value","disabled","MenuItem","renderAISuggestionDialog","border","borderRadius","marginBottom","backgroundColor","Box","span","Grid","container","justifyContent","prosemirrorNodeToHtml","__webpack_exports__","AuthLayout","title","div"],"sourceRoot":""}