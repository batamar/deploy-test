{"version":3,"file":"static/chunks/pages/settings/PaymentMethodForm-1bb896f1c749d949.js","mappings":"sFACA,CAAAA,OAAAC,QAAA,CAAAD,OAAAC,QAAA,MAAAC,IAAA,EACA,8BACA,WACA,OAAeC,EAAQ,MACvB,EACA,qFCJe,SAASC,EAAOC,CAAG,EAChCC,CAAAA,EAAAA,EAAAA,CAAAA,EAAqB,CAAEC,QAASF,EAAIE,OAAO,EAAIF,EAAIG,QAAQ,EAAG,EAChE,6HCGA,IAAMC,EAAgBC,CAAAA,EAAAA,EAAAA,CAAAA,EAAWC,oCAS3BC,EAAe,OAAC,CAAEC,WAAAA,CAAU,CAAEC,UAAAA,CAAS,CAAS,CAAAC,EAC5C,CAACC,EAAUC,EAAY,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACnC,CAACC,EAAWC,EAAa,CAAGF,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACrC,CAACG,EAAaC,EAAe,CAAGJ,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,MACzCK,EAASC,CAAAA,EAAAA,EAAAA,SAAAA,IACTC,EAAWC,CAAAA,EAAAA,EAAAA,WAAAA,IAEXC,EAAmB,UACrBP,EAAa,IAEb,GAAI,CACA,IAAMQ,EAAW,MAAMC,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CAClCC,KAAM,gBACNC,OAAQ,KACZ,GAEAT,EAAeM,GAEXf,GACAA,EAAWe,GAGfR,EAAa,GACjB,CAAE,MAAOY,EAAO,CACZZ,EAAa,IACbhB,CAAAA,EAAAA,EAAAA,CAAAA,EAAO4B,EACX,CACJ,EAEAC,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACNN,GACJ,EAAG,EAAE,EAEL,IAAMO,EAAe,MAAOC,IAGxB,GAFAA,EAAMC,cAAc,GAEhB,CAACb,GAAU,CAACE,EAEZ,OAGJ,GAAM,CAAEO,MAAAA,CAAK,CAAEK,cAAAA,CAAa,CAAE,CAAG,MAAMd,EAAOe,mBAAmB,CAAC,CAC9DC,KAAM,OACNC,KAAMf,EAASgB,UAAU,CAACC,EAAAA,WAAWA,CACzC,GAEA,GAAIV,EACA5B,CAAAA,EAAAA,EAAAA,CAAAA,EAAO4B,QAEP,GAAI,CACAf,EAAY,IAEZ,IAAMW,EAAW,MAAMC,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CAClCC,KAAM,uBACNC,OAAQ,OACRY,KAAM,CACFN,cAAAA,CACJ,CACJ,GAEAjC,CAAAA,EAAAA,EAAAA,CAAAA,EAAO,wBAEPkB,EAAeM,GAEXd,GACAA,EAAUc,GAGdX,EAAY,GAChB,CAAE,MAAOe,EAAO,CACZf,EAAY,IACZb,CAAAA,EAAAA,EAAAA,CAAAA,EAAO4B,EACX,CAER,SAEA,GAAiB,CAACX,EACP,KAIP,GAAAuB,EAAAC,IAAA,EAACC,OAAAA,CAAKC,SAAUb,YACZ,GAAAU,EAAAI,GAAA,EAACN,EAAAA,WAAWA,CAAAA,CAACO,UAAU,kBAEvB,GAAAL,EAAAC,IAAA,EAACK,EAAAA,CAAMA,CAAAA,CAACC,QAAQ,YAAYC,MAAM,UAAUb,KAAK,SAASc,SAAU,CAAC9B,GAAUP,YAC1EK,EAAYiC,eAAe,CAAG,SAAW,MAAM,uBAIhE,CAUAC,CAAAA,EAAA,QARA,SAA2BxC,CAAgC,KAAhC,CAAED,UAAAA,CAAS,CAAED,WAAAA,CAAU,CAAS,CAAhCE,EACvB,MACI,GAAA6B,EAAAI,GAAA,EAACQ,EAAAA,QAAQA,CAAAA,CAACjC,OAAQd,WACd,GAAAmC,EAAAI,GAAA,EAACpC,EAAAA,CAAaE,UAAWA,EAAWD,WAAYA,KAG5D","sources":["webpack://_N_E/?42a2","webpack://_N_E/./lib/notify.ts","webpack://_N_E/./pages/settings/PaymentMethodForm.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/settings/PaymentMethodForm\",\n      function () {\n        return require(\"private-next-pages/settings/PaymentMethodForm.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/settings/PaymentMethodForm\"])\n      });\n    }\n  ","import { openSnackbarExternal } from '../components/common/Notifier';\n\nexport default function notify(obj) {\n  openSnackbarExternal({ message: obj.message || obj.toString() });\n}\n","import React, { useState, useEffect } from 'react';\nimport { Button } from '@mui/material';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements } from '@stripe/react-stripe-js';\nimport { sendApiRequest } from 'lib/api/public';\nimport notify from 'lib/notify';\n\nconst stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY);\n\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\n\ntype Props = {\n    afterFetch?: (response: any) => void,\n    onSuccess?: (response: any) => void,\n}\n\nconst CheckoutForm = ({ afterFetch, onSuccess }: Props) => {\n    const [isSaving, setIsSaving] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [paymentInfo, setPaymentInfo] = useState(null);\n    const stripe = useStripe();\n    const elements = useElements();\n\n    const fetchPaymentInfo = async () => {\n        setIsLoading(true);\n\n        try {\n            const response = await sendApiRequest({\n                path: '/payment-info',\n                method: 'GET',\n            });\n\n            setPaymentInfo(response);\n\n            if (afterFetch) {\n                afterFetch(response);\n            }\n\n            setIsLoading(false);\n        } catch (error) {\n            setIsLoading(false);\n            notify(error);\n        }\n    };\n\n    useEffect(() => {\n        fetchPaymentInfo();\n    }, []);\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n\n        if (!stripe || !elements) {\n            // Stripe.js has not yet loaded.\n            return;\n        }\n\n        const { error, paymentMethod } = await stripe.createPaymentMethod({\n            type: 'card',\n            card: elements.getElement(CardElement),\n        });\n\n        if (error) {\n            notify(error);\n        } else {\n            try {\n                setIsSaving(true);\n\n                const response = await sendApiRequest({\n                    path: '/save-payment-method',\n                    method: 'POST',\n                    data: {\n                        paymentMethod,\n                    }\n                });\n\n                notify('Payment method saved');\n\n                setPaymentInfo(response);\n\n                if (onSuccess) {\n                    onSuccess(response);\n                }\n\n                setIsSaving(false);\n            } catch (error) {\n                setIsSaving(false);\n                notify(error);\n            }\n        }\n    };\n\n    if (isLoading || !paymentInfo) {\n        return null;\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <CardElement className=\"StripeElement\" />\n\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={!stripe || isSaving}>\n                {paymentInfo.paymentMethodId ? 'Update' : 'Add'} payment method\n            </Button>\n        </form>\n    );\n};\n\nfunction PaymentMethodForm({ onSuccess, afterFetch }: Props) {\n    return (\n        <Elements stripe={stripePromise}>\n            <CheckoutForm onSuccess={onSuccess} afterFetch={afterFetch} />\n        </Elements>\n    );\n}\n\nexport default PaymentMethodForm;\n"],"names":["window","__NEXT_P","push","__webpack_require__","notify","obj","openSnackbarExternal","message","toString","stripePromise","loadStripe","process","CheckoutForm","afterFetch","onSuccess","param","isSaving","setIsSaving","useState","isLoading","setIsLoading","paymentInfo","setPaymentInfo","stripe","useStripe","elements","useElements","fetchPaymentInfo","response","sendApiRequest","path","method","error","useEffect","handleSubmit","event","preventDefault","paymentMethod","createPaymentMethod","type","card","getElement","CardElement","data","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","form","onSubmit","jsx","className","Button","variant","color","disabled","paymentMethodId","__webpack_exports__","Elements"],"sourceRoot":""}